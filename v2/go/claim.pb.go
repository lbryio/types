// Code generated by protoc-gen-go. DO NOT EDIT.
// source: claim.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Fee_Currency int32

const (
	Fee_UNKNOWN_CURRENCY Fee_Currency = 0
	Fee_LBC              Fee_Currency = 1
	Fee_BTC              Fee_Currency = 2
	Fee_USD              Fee_Currency = 3
)

var Fee_Currency_name = map[int32]string{
	0: "UNKNOWN_CURRENCY",
	1: "LBC",
	2: "BTC",
	3: "USD",
}

var Fee_Currency_value = map[string]int32{
	"UNKNOWN_CURRENCY": 0,
	"LBC":              1,
	"BTC":              2,
	"USD":              3,
}

func (x Fee_Currency) String() string {
	return proto.EnumName(Fee_Currency_name, int32(x))
}

func (Fee_Currency) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{3, 0}
}

// ISO 639-1
type Language_Language int32

const (
	Language_UNKNOWN_LANGUAGE Language_Language = 0
	Language_en               Language_Language = 1
	Language_aa               Language_Language = 2
	Language_ab               Language_Language = 3
	Language_ae               Language_Language = 4
	Language_af               Language_Language = 5
	Language_ak               Language_Language = 6
	Language_am               Language_Language = 7
	Language_an               Language_Language = 8
	Language_ar               Language_Language = 9
	Language_as               Language_Language = 10
	Language_av               Language_Language = 11
	Language_ay               Language_Language = 12
	Language_az               Language_Language = 13
	Language_ba               Language_Language = 14
	Language_be               Language_Language = 15
	Language_bg               Language_Language = 16
	Language_bh               Language_Language = 17
	Language_bi               Language_Language = 18
	Language_bm               Language_Language = 19
	Language_bn               Language_Language = 20
	Language_bo               Language_Language = 21
	Language_br               Language_Language = 22
	Language_bs               Language_Language = 23
	Language_ca               Language_Language = 24
	Language_ce               Language_Language = 25
	Language_ch               Language_Language = 26
	Language_co               Language_Language = 27
	Language_cr               Language_Language = 28
	Language_cs               Language_Language = 29
	Language_cu               Language_Language = 30
	Language_cv               Language_Language = 31
	Language_cy               Language_Language = 32
	Language_da               Language_Language = 33
	Language_de               Language_Language = 34
	Language_dv               Language_Language = 35
	Language_dz               Language_Language = 36
	Language_ee               Language_Language = 37
	Language_el               Language_Language = 38
	Language_eo               Language_Language = 39
	Language_es               Language_Language = 40
	Language_et               Language_Language = 41
	Language_eu               Language_Language = 42
	Language_fa               Language_Language = 43
	Language_ff               Language_Language = 44
	Language_fi               Language_Language = 45
	Language_fj               Language_Language = 46
	Language_fo               Language_Language = 47
	Language_fr               Language_Language = 48
	Language_fy               Language_Language = 49
	Language_ga               Language_Language = 50
	Language_gd               Language_Language = 51
	Language_gl               Language_Language = 52
	Language_gn               Language_Language = 53
	Language_gu               Language_Language = 54
	Language_gv               Language_Language = 55
	Language_ha               Language_Language = 56
	Language_he               Language_Language = 57
	Language_hi               Language_Language = 58
	Language_ho               Language_Language = 59
	Language_hr               Language_Language = 60
	Language_ht               Language_Language = 61
	Language_hu               Language_Language = 62
	Language_hy               Language_Language = 63
	Language_hz               Language_Language = 64
	Language_ia               Language_Language = 65
	Language_id               Language_Language = 66
	Language_ie               Language_Language = 67
	Language_ig               Language_Language = 68
	Language_ii               Language_Language = 69
	Language_ik               Language_Language = 70
	Language_io               Language_Language = 71
	Language_is               Language_Language = 72
	Language_it               Language_Language = 73
	Language_iu               Language_Language = 74
	Language_ja               Language_Language = 75
	Language_jv               Language_Language = 76
	Language_ka               Language_Language = 77
	Language_kg               Language_Language = 78
	Language_ki               Language_Language = 79
	Language_kj               Language_Language = 80
	Language_kk               Language_Language = 81
	Language_kl               Language_Language = 82
	Language_km               Language_Language = 83
	Language_kn               Language_Language = 84
	Language_ko               Language_Language = 85
	Language_kr               Language_Language = 86
	Language_ks               Language_Language = 87
	Language_ku               Language_Language = 88
	Language_kv               Language_Language = 89
	Language_kw               Language_Language = 90
	Language_ky               Language_Language = 91
	Language_la               Language_Language = 92
	Language_lb               Language_Language = 93
	Language_lg               Language_Language = 94
	Language_li               Language_Language = 95
	Language_ln               Language_Language = 96
	Language_lo               Language_Language = 97
	Language_lt               Language_Language = 98
	Language_lu               Language_Language = 99
	Language_lv               Language_Language = 100
	Language_mg               Language_Language = 101
	Language_mh               Language_Language = 102
	Language_mi               Language_Language = 103
	Language_mk               Language_Language = 104
	Language_ml               Language_Language = 105
	Language_mn               Language_Language = 106
	Language_mr               Language_Language = 107
	Language_ms               Language_Language = 108
	Language_mt               Language_Language = 109
	Language_my               Language_Language = 110
	Language_na               Language_Language = 111
	Language_nb               Language_Language = 112
	Language_nd               Language_Language = 113
	Language_ne               Language_Language = 114
	Language_ng               Language_Language = 115
	Language_nl               Language_Language = 116
	Language_nn               Language_Language = 117
	Language_no               Language_Language = 118
	Language_nr               Language_Language = 119
	Language_nv               Language_Language = 120
	Language_ny               Language_Language = 121
	Language_oc               Language_Language = 122
	Language_oj               Language_Language = 123
	Language_om               Language_Language = 124
	Language_or               Language_Language = 125
	Language_os               Language_Language = 126
	Language_pa               Language_Language = 127
	Language_pi               Language_Language = 128
	Language_pl               Language_Language = 129
	Language_ps               Language_Language = 130
	Language_pt               Language_Language = 131
	Language_qu               Language_Language = 132
	Language_rm               Language_Language = 133
	Language_rn               Language_Language = 134
	Language_ro               Language_Language = 135
	Language_ru               Language_Language = 136
	Language_rw               Language_Language = 137
	Language_sa               Language_Language = 138
	Language_sc               Language_Language = 139
	Language_sd               Language_Language = 140
	Language_se               Language_Language = 141
	Language_sg               Language_Language = 142
	Language_si               Language_Language = 143
	Language_sk               Language_Language = 144
	Language_sl               Language_Language = 145
	Language_sm               Language_Language = 146
	Language_sn               Language_Language = 147
	Language_so               Language_Language = 148
	Language_sq               Language_Language = 149
	Language_sr               Language_Language = 150
	Language_ss               Language_Language = 151
	Language_st               Language_Language = 152
	Language_su               Language_Language = 153
	Language_sv               Language_Language = 154
	Language_sw               Language_Language = 155
	Language_ta               Language_Language = 156
	Language_te               Language_Language = 157
	Language_tg               Language_Language = 158
	Language_th               Language_Language = 159
	Language_ti               Language_Language = 160
	Language_tk               Language_Language = 161
	Language_tl               Language_Language = 162
	Language_tn               Language_Language = 163
	Language_to               Language_Language = 164
	Language_tr               Language_Language = 165
	Language_ts               Language_Language = 166
	Language_tt               Language_Language = 167
	Language_tw               Language_Language = 168
	Language_ty               Language_Language = 169
	Language_ug               Language_Language = 170
	Language_uk               Language_Language = 171
	Language_ur               Language_Language = 172
	Language_uz               Language_Language = 173
	Language_ve               Language_Language = 174
	Language_vi               Language_Language = 175
	Language_vo               Language_Language = 176
	Language_wa               Language_Language = 177
	Language_wo               Language_Language = 178
	Language_xh               Language_Language = 179
	Language_yi               Language_Language = 180
	Language_yo               Language_Language = 181
	Language_za               Language_Language = 182
	Language_zh               Language_Language = 183
	Language_zu               Language_Language = 184
)

var Language_Language_name = map[int32]string{
	0:   "UNKNOWN_LANGUAGE",
	1:   "en",
	2:   "aa",
	3:   "ab",
	4:   "ae",
	5:   "af",
	6:   "ak",
	7:   "am",
	8:   "an",
	9:   "ar",
	10:  "as",
	11:  "av",
	12:  "ay",
	13:  "az",
	14:  "ba",
	15:  "be",
	16:  "bg",
	17:  "bh",
	18:  "bi",
	19:  "bm",
	20:  "bn",
	21:  "bo",
	22:  "br",
	23:  "bs",
	24:  "ca",
	25:  "ce",
	26:  "ch",
	27:  "co",
	28:  "cr",
	29:  "cs",
	30:  "cu",
	31:  "cv",
	32:  "cy",
	33:  "da",
	34:  "de",
	35:  "dv",
	36:  "dz",
	37:  "ee",
	38:  "el",
	39:  "eo",
	40:  "es",
	41:  "et",
	42:  "eu",
	43:  "fa",
	44:  "ff",
	45:  "fi",
	46:  "fj",
	47:  "fo",
	48:  "fr",
	49:  "fy",
	50:  "ga",
	51:  "gd",
	52:  "gl",
	53:  "gn",
	54:  "gu",
	55:  "gv",
	56:  "ha",
	57:  "he",
	58:  "hi",
	59:  "ho",
	60:  "hr",
	61:  "ht",
	62:  "hu",
	63:  "hy",
	64:  "hz",
	65:  "ia",
	66:  "id",
	67:  "ie",
	68:  "ig",
	69:  "ii",
	70:  "ik",
	71:  "io",
	72:  "is",
	73:  "it",
	74:  "iu",
	75:  "ja",
	76:  "jv",
	77:  "ka",
	78:  "kg",
	79:  "ki",
	80:  "kj",
	81:  "kk",
	82:  "kl",
	83:  "km",
	84:  "kn",
	85:  "ko",
	86:  "kr",
	87:  "ks",
	88:  "ku",
	89:  "kv",
	90:  "kw",
	91:  "ky",
	92:  "la",
	93:  "lb",
	94:  "lg",
	95:  "li",
	96:  "ln",
	97:  "lo",
	98:  "lt",
	99:  "lu",
	100: "lv",
	101: "mg",
	102: "mh",
	103: "mi",
	104: "mk",
	105: "ml",
	106: "mn",
	107: "mr",
	108: "ms",
	109: "mt",
	110: "my",
	111: "na",
	112: "nb",
	113: "nd",
	114: "ne",
	115: "ng",
	116: "nl",
	117: "nn",
	118: "no",
	119: "nr",
	120: "nv",
	121: "ny",
	122: "oc",
	123: "oj",
	124: "om",
	125: "or",
	126: "os",
	127: "pa",
	128: "pi",
	129: "pl",
	130: "ps",
	131: "pt",
	132: "qu",
	133: "rm",
	134: "rn",
	135: "ro",
	136: "ru",
	137: "rw",
	138: "sa",
	139: "sc",
	140: "sd",
	141: "se",
	142: "sg",
	143: "si",
	144: "sk",
	145: "sl",
	146: "sm",
	147: "sn",
	148: "so",
	149: "sq",
	150: "sr",
	151: "ss",
	152: "st",
	153: "su",
	154: "sv",
	155: "sw",
	156: "ta",
	157: "te",
	158: "tg",
	159: "th",
	160: "ti",
	161: "tk",
	162: "tl",
	163: "tn",
	164: "to",
	165: "tr",
	166: "ts",
	167: "tt",
	168: "tw",
	169: "ty",
	170: "ug",
	171: "uk",
	172: "ur",
	173: "uz",
	174: "ve",
	175: "vi",
	176: "vo",
	177: "wa",
	178: "wo",
	179: "xh",
	180: "yi",
	181: "yo",
	182: "za",
	183: "zh",
	184: "zu",
}

var Language_Language_value = map[string]int32{
	"UNKNOWN_LANGUAGE": 0,
	"en":               1,
	"aa":               2,
	"ab":               3,
	"ae":               4,
	"af":               5,
	"ak":               6,
	"am":               7,
	"an":               8,
	"ar":               9,
	"as":               10,
	"av":               11,
	"ay":               12,
	"az":               13,
	"ba":               14,
	"be":               15,
	"bg":               16,
	"bh":               17,
	"bi":               18,
	"bm":               19,
	"bn":               20,
	"bo":               21,
	"br":               22,
	"bs":               23,
	"ca":               24,
	"ce":               25,
	"ch":               26,
	"co":               27,
	"cr":               28,
	"cs":               29,
	"cu":               30,
	"cv":               31,
	"cy":               32,
	"da":               33,
	"de":               34,
	"dv":               35,
	"dz":               36,
	"ee":               37,
	"el":               38,
	"eo":               39,
	"es":               40,
	"et":               41,
	"eu":               42,
	"fa":               43,
	"ff":               44,
	"fi":               45,
	"fj":               46,
	"fo":               47,
	"fr":               48,
	"fy":               49,
	"ga":               50,
	"gd":               51,
	"gl":               52,
	"gn":               53,
	"gu":               54,
	"gv":               55,
	"ha":               56,
	"he":               57,
	"hi":               58,
	"ho":               59,
	"hr":               60,
	"ht":               61,
	"hu":               62,
	"hy":               63,
	"hz":               64,
	"ia":               65,
	"id":               66,
	"ie":               67,
	"ig":               68,
	"ii":               69,
	"ik":               70,
	"io":               71,
	"is":               72,
	"it":               73,
	"iu":               74,
	"ja":               75,
	"jv":               76,
	"ka":               77,
	"kg":               78,
	"ki":               79,
	"kj":               80,
	"kk":               81,
	"kl":               82,
	"km":               83,
	"kn":               84,
	"ko":               85,
	"kr":               86,
	"ks":               87,
	"ku":               88,
	"kv":               89,
	"kw":               90,
	"ky":               91,
	"la":               92,
	"lb":               93,
	"lg":               94,
	"li":               95,
	"ln":               96,
	"lo":               97,
	"lt":               98,
	"lu":               99,
	"lv":               100,
	"mg":               101,
	"mh":               102,
	"mi":               103,
	"mk":               104,
	"ml":               105,
	"mn":               106,
	"mr":               107,
	"ms":               108,
	"mt":               109,
	"my":               110,
	"na":               111,
	"nb":               112,
	"nd":               113,
	"ne":               114,
	"ng":               115,
	"nl":               116,
	"nn":               117,
	"no":               118,
	"nr":               119,
	"nv":               120,
	"ny":               121,
	"oc":               122,
	"oj":               123,
	"om":               124,
	"or":               125,
	"os":               126,
	"pa":               127,
	"pi":               128,
	"pl":               129,
	"ps":               130,
	"pt":               131,
	"qu":               132,
	"rm":               133,
	"rn":               134,
	"ro":               135,
	"ru":               136,
	"rw":               137,
	"sa":               138,
	"sc":               139,
	"sd":               140,
	"se":               141,
	"sg":               142,
	"si":               143,
	"sk":               144,
	"sl":               145,
	"sm":               146,
	"sn":               147,
	"so":               148,
	"sq":               149,
	"sr":               150,
	"ss":               151,
	"st":               152,
	"su":               153,
	"sv":               154,
	"sw":               155,
	"ta":               156,
	"te":               157,
	"tg":               158,
	"th":               159,
	"ti":               160,
	"tk":               161,
	"tl":               162,
	"tn":               163,
	"to":               164,
	"tr":               165,
	"ts":               166,
	"tt":               167,
	"tw":               168,
	"ty":               169,
	"ug":               170,
	"uk":               171,
	"ur":               172,
	"uz":               173,
	"ve":               174,
	"vi":               175,
	"vo":               176,
	"wa":               177,
	"wo":               178,
	"xh":               179,
	"yi":               180,
	"yo":               181,
	"za":               182,
	"zh":               183,
	"zu":               184,
}

func (x Language_Language) String() string {
	return proto.EnumName(Language_Language_name, int32(x))
}

func (Language_Language) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{8, 0}
}

// ISO 15924
type Language_Script int32

const (
	Language_UNKNOWN_SCRIPT Language_Script = 0
	Language_Adlm           Language_Script = 1
	Language_Afak           Language_Script = 2
	Language_Aghb           Language_Script = 3
	Language_Ahom           Language_Script = 4
	Language_Arab           Language_Script = 5
	Language_Aran           Language_Script = 6
	Language_Armi           Language_Script = 7
	Language_Armn           Language_Script = 8
	Language_Avst           Language_Script = 9
	Language_Bali           Language_Script = 10
	Language_Bamu           Language_Script = 11
	Language_Bass           Language_Script = 12
	Language_Batk           Language_Script = 13
	Language_Beng           Language_Script = 14
	Language_Bhks           Language_Script = 15
	Language_Blis           Language_Script = 16
	Language_Bopo           Language_Script = 17
	Language_Brah           Language_Script = 18
	Language_Brai           Language_Script = 19
	Language_Bugi           Language_Script = 20
	Language_Buhd           Language_Script = 21
	Language_Cakm           Language_Script = 22
	Language_Cans           Language_Script = 23
	Language_Cari           Language_Script = 24
	Language_Cham           Language_Script = 25
	Language_Cher           Language_Script = 26
	Language_Cirt           Language_Script = 27
	Language_Copt           Language_Script = 28
	Language_Cpmn           Language_Script = 29
	Language_Cprt           Language_Script = 30
	Language_Cyrl           Language_Script = 31
	Language_Cyrs           Language_Script = 32
	Language_Deva           Language_Script = 33
	Language_Dogr           Language_Script = 34
	Language_Dsrt           Language_Script = 35
	Language_Dupl           Language_Script = 36
	Language_Egyd           Language_Script = 37
	Language_Egyh           Language_Script = 38
	Language_Egyp           Language_Script = 39
	Language_Elba           Language_Script = 40
	Language_Elym           Language_Script = 41
	Language_Ethi           Language_Script = 42
	Language_Geok           Language_Script = 43
	Language_Geor           Language_Script = 44
	Language_Glag           Language_Script = 45
	Language_Gong           Language_Script = 46
	Language_Gonm           Language_Script = 47
	Language_Goth           Language_Script = 48
	Language_Gran           Language_Script = 49
	Language_Grek           Language_Script = 50
	Language_Gujr           Language_Script = 51
	Language_Guru           Language_Script = 52
	Language_Hanb           Language_Script = 53
	Language_Hang           Language_Script = 54
	Language_Hani           Language_Script = 55
	Language_Hano           Language_Script = 56
	Language_Hans           Language_Script = 57
	Language_Hant           Language_Script = 58
	Language_Hatr           Language_Script = 59
	Language_Hebr           Language_Script = 60
	Language_Hira           Language_Script = 61
	Language_Hluw           Language_Script = 62
	Language_Hmng           Language_Script = 63
	Language_Hmnp           Language_Script = 64
	Language_Hrkt           Language_Script = 65
	Language_Hung           Language_Script = 66
	Language_Inds           Language_Script = 67
	Language_Ital           Language_Script = 68
	Language_Jamo           Language_Script = 69
	Language_Java           Language_Script = 70
	Language_Jpan           Language_Script = 71
	Language_Jurc           Language_Script = 72
	Language_Kali           Language_Script = 73
	Language_Kana           Language_Script = 74
	Language_Khar           Language_Script = 75
	Language_Khmr           Language_Script = 76
	Language_Khoj           Language_Script = 77
	Language_Kitl           Language_Script = 78
	Language_Kits           Language_Script = 79
	Language_Knda           Language_Script = 80
	Language_Kore           Language_Script = 81
	Language_Kpel           Language_Script = 82
	Language_Kthi           Language_Script = 83
	Language_Lana           Language_Script = 84
	Language_Laoo           Language_Script = 85
	Language_Latf           Language_Script = 86
	Language_Latg           Language_Script = 87
	Language_Latn           Language_Script = 88
	Language_Leke           Language_Script = 89
	Language_Lepc           Language_Script = 90
	Language_Limb           Language_Script = 91
	Language_Lina           Language_Script = 92
	Language_Linb           Language_Script = 93
	Language_Lisu           Language_Script = 94
	Language_Loma           Language_Script = 95
	Language_Lyci           Language_Script = 96
	Language_Lydi           Language_Script = 97
	Language_Mahj           Language_Script = 98
	Language_Maka           Language_Script = 99
	Language_Mand           Language_Script = 100
	Language_Mani           Language_Script = 101
	Language_Marc           Language_Script = 102
	Language_Maya           Language_Script = 103
	Language_Medf           Language_Script = 104
	Language_Mend           Language_Script = 105
	Language_Merc           Language_Script = 106
	Language_Mero           Language_Script = 107
	Language_Mlym           Language_Script = 108
	Language_Modi           Language_Script = 109
	Language_Mong           Language_Script = 110
	Language_Moon           Language_Script = 111
	Language_Mroo           Language_Script = 112
	Language_Mtei           Language_Script = 113
	Language_Mult           Language_Script = 114
	Language_Mymr           Language_Script = 115
	Language_Nand           Language_Script = 116
	Language_Narb           Language_Script = 117
	Language_Nbat           Language_Script = 118
	Language_Newa           Language_Script = 119
	Language_Nkdb           Language_Script = 120
	Language_Nkgb           Language_Script = 121
	Language_Nkoo           Language_Script = 122
	Language_Nshu           Language_Script = 123
	Language_Ogam           Language_Script = 124
	Language_Olck           Language_Script = 125
	Language_Orkh           Language_Script = 126
	Language_Orya           Language_Script = 127
	Language_Osge           Language_Script = 128
	Language_Osma           Language_Script = 129
	Language_Palm           Language_Script = 130
	Language_Pauc           Language_Script = 131
	Language_Perm           Language_Script = 132
	Language_Phag           Language_Script = 133
	Language_Phli           Language_Script = 134
	Language_Phlp           Language_Script = 135
	Language_Phlv           Language_Script = 136
	Language_Phnx           Language_Script = 137
	Language_Plrd           Language_Script = 138
	Language_Piqd           Language_Script = 139
	Language_Prti           Language_Script = 140
	Language_Qaaa           Language_Script = 141
	Language_Qabx           Language_Script = 142
	Language_Rjng           Language_Script = 143
	Language_Rohg           Language_Script = 144
	Language_Roro           Language_Script = 145
	Language_Runr           Language_Script = 146
	Language_Samr           Language_Script = 147
	Language_Sara           Language_Script = 148
	Language_Sarb           Language_Script = 149
	Language_Saur           Language_Script = 150
	Language_Sgnw           Language_Script = 151
	Language_Shaw           Language_Script = 152
	Language_Shrd           Language_Script = 153
	Language_Shui           Language_Script = 154
	Language_Sidd           Language_Script = 155
	Language_Sind           Language_Script = 156
	Language_Sinh           Language_Script = 157
	Language_Sogd           Language_Script = 158
	Language_Sogo           Language_Script = 159
	Language_Sora           Language_Script = 160
	Language_Soyo           Language_Script = 161
	Language_Sund           Language_Script = 162
	Language_Sylo           Language_Script = 163
	Language_Syrc           Language_Script = 164
	Language_Syre           Language_Script = 165
	Language_Syrj           Language_Script = 166
	Language_Syrn           Language_Script = 167
	Language_Tagb           Language_Script = 168
	Language_Takr           Language_Script = 169
	Language_Tale           Language_Script = 170
	Language_Talu           Language_Script = 171
	Language_Taml           Language_Script = 172
	Language_Tang           Language_Script = 173
	Language_Tavt           Language_Script = 174
	Language_Telu           Language_Script = 175
	Language_Teng           Language_Script = 176
	Language_Tfng           Language_Script = 177
	Language_Tglg           Language_Script = 178
	Language_Thaa           Language_Script = 179
	Language_Thai           Language_Script = 180
	Language_Tibt           Language_Script = 181
	Language_Tirh           Language_Script = 182
	Language_Ugar           Language_Script = 183
	Language_Vaii           Language_Script = 184
	Language_Visp           Language_Script = 185
	Language_Wara           Language_Script = 186
	Language_Wcho           Language_Script = 187
	Language_Wole           Language_Script = 188
	Language_Xpeo           Language_Script = 189
	Language_Xsux           Language_Script = 190
	Language_Yiii           Language_Script = 191
	Language_Zanb           Language_Script = 192
	Language_Zinh           Language_Script = 193
	Language_Zmth           Language_Script = 194
	Language_Zsye           Language_Script = 195
	Language_Zsym           Language_Script = 196
	Language_Zxxx           Language_Script = 197
	Language_Zyyy           Language_Script = 198
	Language_Zzzz           Language_Script = 199
)

var Language_Script_name = map[int32]string{
	0:   "UNKNOWN_SCRIPT",
	1:   "Adlm",
	2:   "Afak",
	3:   "Aghb",
	4:   "Ahom",
	5:   "Arab",
	6:   "Aran",
	7:   "Armi",
	8:   "Armn",
	9:   "Avst",
	10:  "Bali",
	11:  "Bamu",
	12:  "Bass",
	13:  "Batk",
	14:  "Beng",
	15:  "Bhks",
	16:  "Blis",
	17:  "Bopo",
	18:  "Brah",
	19:  "Brai",
	20:  "Bugi",
	21:  "Buhd",
	22:  "Cakm",
	23:  "Cans",
	24:  "Cari",
	25:  "Cham",
	26:  "Cher",
	27:  "Cirt",
	28:  "Copt",
	29:  "Cpmn",
	30:  "Cprt",
	31:  "Cyrl",
	32:  "Cyrs",
	33:  "Deva",
	34:  "Dogr",
	35:  "Dsrt",
	36:  "Dupl",
	37:  "Egyd",
	38:  "Egyh",
	39:  "Egyp",
	40:  "Elba",
	41:  "Elym",
	42:  "Ethi",
	43:  "Geok",
	44:  "Geor",
	45:  "Glag",
	46:  "Gong",
	47:  "Gonm",
	48:  "Goth",
	49:  "Gran",
	50:  "Grek",
	51:  "Gujr",
	52:  "Guru",
	53:  "Hanb",
	54:  "Hang",
	55:  "Hani",
	56:  "Hano",
	57:  "Hans",
	58:  "Hant",
	59:  "Hatr",
	60:  "Hebr",
	61:  "Hira",
	62:  "Hluw",
	63:  "Hmng",
	64:  "Hmnp",
	65:  "Hrkt",
	66:  "Hung",
	67:  "Inds",
	68:  "Ital",
	69:  "Jamo",
	70:  "Java",
	71:  "Jpan",
	72:  "Jurc",
	73:  "Kali",
	74:  "Kana",
	75:  "Khar",
	76:  "Khmr",
	77:  "Khoj",
	78:  "Kitl",
	79:  "Kits",
	80:  "Knda",
	81:  "Kore",
	82:  "Kpel",
	83:  "Kthi",
	84:  "Lana",
	85:  "Laoo",
	86:  "Latf",
	87:  "Latg",
	88:  "Latn",
	89:  "Leke",
	90:  "Lepc",
	91:  "Limb",
	92:  "Lina",
	93:  "Linb",
	94:  "Lisu",
	95:  "Loma",
	96:  "Lyci",
	97:  "Lydi",
	98:  "Mahj",
	99:  "Maka",
	100: "Mand",
	101: "Mani",
	102: "Marc",
	103: "Maya",
	104: "Medf",
	105: "Mend",
	106: "Merc",
	107: "Mero",
	108: "Mlym",
	109: "Modi",
	110: "Mong",
	111: "Moon",
	112: "Mroo",
	113: "Mtei",
	114: "Mult",
	115: "Mymr",
	116: "Nand",
	117: "Narb",
	118: "Nbat",
	119: "Newa",
	120: "Nkdb",
	121: "Nkgb",
	122: "Nkoo",
	123: "Nshu",
	124: "Ogam",
	125: "Olck",
	126: "Orkh",
	127: "Orya",
	128: "Osge",
	129: "Osma",
	130: "Palm",
	131: "Pauc",
	132: "Perm",
	133: "Phag",
	134: "Phli",
	135: "Phlp",
	136: "Phlv",
	137: "Phnx",
	138: "Plrd",
	139: "Piqd",
	140: "Prti",
	141: "Qaaa",
	142: "Qabx",
	143: "Rjng",
	144: "Rohg",
	145: "Roro",
	146: "Runr",
	147: "Samr",
	148: "Sara",
	149: "Sarb",
	150: "Saur",
	151: "Sgnw",
	152: "Shaw",
	153: "Shrd",
	154: "Shui",
	155: "Sidd",
	156: "Sind",
	157: "Sinh",
	158: "Sogd",
	159: "Sogo",
	160: "Sora",
	161: "Soyo",
	162: "Sund",
	163: "Sylo",
	164: "Syrc",
	165: "Syre",
	166: "Syrj",
	167: "Syrn",
	168: "Tagb",
	169: "Takr",
	170: "Tale",
	171: "Talu",
	172: "Taml",
	173: "Tang",
	174: "Tavt",
	175: "Telu",
	176: "Teng",
	177: "Tfng",
	178: "Tglg",
	179: "Thaa",
	180: "Thai",
	181: "Tibt",
	182: "Tirh",
	183: "Ugar",
	184: "Vaii",
	185: "Visp",
	186: "Wara",
	187: "Wcho",
	188: "Wole",
	189: "Xpeo",
	190: "Xsux",
	191: "Yiii",
	192: "Zanb",
	193: "Zinh",
	194: "Zmth",
	195: "Zsye",
	196: "Zsym",
	197: "Zxxx",
	198: "Zyyy",
	199: "Zzzz",
}

var Language_Script_value = map[string]int32{
	"UNKNOWN_SCRIPT": 0,
	"Adlm":           1,
	"Afak":           2,
	"Aghb":           3,
	"Ahom":           4,
	"Arab":           5,
	"Aran":           6,
	"Armi":           7,
	"Armn":           8,
	"Avst":           9,
	"Bali":           10,
	"Bamu":           11,
	"Bass":           12,
	"Batk":           13,
	"Beng":           14,
	"Bhks":           15,
	"Blis":           16,
	"Bopo":           17,
	"Brah":           18,
	"Brai":           19,
	"Bugi":           20,
	"Buhd":           21,
	"Cakm":           22,
	"Cans":           23,
	"Cari":           24,
	"Cham":           25,
	"Cher":           26,
	"Cirt":           27,
	"Copt":           28,
	"Cpmn":           29,
	"Cprt":           30,
	"Cyrl":           31,
	"Cyrs":           32,
	"Deva":           33,
	"Dogr":           34,
	"Dsrt":           35,
	"Dupl":           36,
	"Egyd":           37,
	"Egyh":           38,
	"Egyp":           39,
	"Elba":           40,
	"Elym":           41,
	"Ethi":           42,
	"Geok":           43,
	"Geor":           44,
	"Glag":           45,
	"Gong":           46,
	"Gonm":           47,
	"Goth":           48,
	"Gran":           49,
	"Grek":           50,
	"Gujr":           51,
	"Guru":           52,
	"Hanb":           53,
	"Hang":           54,
	"Hani":           55,
	"Hano":           56,
	"Hans":           57,
	"Hant":           58,
	"Hatr":           59,
	"Hebr":           60,
	"Hira":           61,
	"Hluw":           62,
	"Hmng":           63,
	"Hmnp":           64,
	"Hrkt":           65,
	"Hung":           66,
	"Inds":           67,
	"Ital":           68,
	"Jamo":           69,
	"Java":           70,
	"Jpan":           71,
	"Jurc":           72,
	"Kali":           73,
	"Kana":           74,
	"Khar":           75,
	"Khmr":           76,
	"Khoj":           77,
	"Kitl":           78,
	"Kits":           79,
	"Knda":           80,
	"Kore":           81,
	"Kpel":           82,
	"Kthi":           83,
	"Lana":           84,
	"Laoo":           85,
	"Latf":           86,
	"Latg":           87,
	"Latn":           88,
	"Leke":           89,
	"Lepc":           90,
	"Limb":           91,
	"Lina":           92,
	"Linb":           93,
	"Lisu":           94,
	"Loma":           95,
	"Lyci":           96,
	"Lydi":           97,
	"Mahj":           98,
	"Maka":           99,
	"Mand":           100,
	"Mani":           101,
	"Marc":           102,
	"Maya":           103,
	"Medf":           104,
	"Mend":           105,
	"Merc":           106,
	"Mero":           107,
	"Mlym":           108,
	"Modi":           109,
	"Mong":           110,
	"Moon":           111,
	"Mroo":           112,
	"Mtei":           113,
	"Mult":           114,
	"Mymr":           115,
	"Nand":           116,
	"Narb":           117,
	"Nbat":           118,
	"Newa":           119,
	"Nkdb":           120,
	"Nkgb":           121,
	"Nkoo":           122,
	"Nshu":           123,
	"Ogam":           124,
	"Olck":           125,
	"Orkh":           126,
	"Orya":           127,
	"Osge":           128,
	"Osma":           129,
	"Palm":           130,
	"Pauc":           131,
	"Perm":           132,
	"Phag":           133,
	"Phli":           134,
	"Phlp":           135,
	"Phlv":           136,
	"Phnx":           137,
	"Plrd":           138,
	"Piqd":           139,
	"Prti":           140,
	"Qaaa":           141,
	"Qabx":           142,
	"Rjng":           143,
	"Rohg":           144,
	"Roro":           145,
	"Runr":           146,
	"Samr":           147,
	"Sara":           148,
	"Sarb":           149,
	"Saur":           150,
	"Sgnw":           151,
	"Shaw":           152,
	"Shrd":           153,
	"Shui":           154,
	"Sidd":           155,
	"Sind":           156,
	"Sinh":           157,
	"Sogd":           158,
	"Sogo":           159,
	"Sora":           160,
	"Soyo":           161,
	"Sund":           162,
	"Sylo":           163,
	"Syrc":           164,
	"Syre":           165,
	"Syrj":           166,
	"Syrn":           167,
	"Tagb":           168,
	"Takr":           169,
	"Tale":           170,
	"Talu":           171,
	"Taml":           172,
	"Tang":           173,
	"Tavt":           174,
	"Telu":           175,
	"Teng":           176,
	"Tfng":           177,
	"Tglg":           178,
	"Thaa":           179,
	"Thai":           180,
	"Tibt":           181,
	"Tirh":           182,
	"Ugar":           183,
	"Vaii":           184,
	"Visp":           185,
	"Wara":           186,
	"Wcho":           187,
	"Wole":           188,
	"Xpeo":           189,
	"Xsux":           190,
	"Yiii":           191,
	"Zanb":           192,
	"Zinh":           193,
	"Zmth":           194,
	"Zsye":           195,
	"Zsym":           196,
	"Zxxx":           197,
	"Zyyy":           198,
	"Zzzz":           199,
}

func (x Language_Script) String() string {
	return proto.EnumName(Language_Script_name, int32(x))
}

func (Language_Script) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{8, 1}
}

type Location_Country int32

const (
	Location_UNKNOWN_COUNTRY Location_Country = 0
	Location_AF              Location_Country = 1
	Location_AX              Location_Country = 2
	Location_AL              Location_Country = 3
	Location_DZ              Location_Country = 4
	Location_AS              Location_Country = 5
	Location_AD              Location_Country = 6
	Location_AO              Location_Country = 7
	Location_AI              Location_Country = 8
	Location_AQ              Location_Country = 9
	Location_AG              Location_Country = 10
	Location_AR              Location_Country = 11
	Location_AM              Location_Country = 12
	Location_AW              Location_Country = 13
	Location_AU              Location_Country = 14
	Location_AT              Location_Country = 15
	Location_AZ              Location_Country = 16
	Location_BS              Location_Country = 17
	Location_BH              Location_Country = 18
	Location_BD              Location_Country = 19
	Location_BB              Location_Country = 20
	Location_BY              Location_Country = 21
	Location_BE              Location_Country = 22
	Location_BZ              Location_Country = 23
	Location_BJ              Location_Country = 24
	Location_BM              Location_Country = 25
	Location_BT              Location_Country = 26
	Location_BO              Location_Country = 27
	Location_BQ              Location_Country = 28
	Location_BA              Location_Country = 29
	Location_BW              Location_Country = 30
	Location_BV              Location_Country = 31
	Location_BR              Location_Country = 32
	Location_IO              Location_Country = 33
	Location_BN              Location_Country = 34
	Location_BG              Location_Country = 35
	Location_BF              Location_Country = 36
	Location_BI              Location_Country = 37
	Location_KH              Location_Country = 38
	Location_CM              Location_Country = 39
	Location_CA              Location_Country = 40
	Location_CV              Location_Country = 41
	Location_KY              Location_Country = 42
	Location_CF              Location_Country = 43
	Location_TD              Location_Country = 44
	Location_CL              Location_Country = 45
	Location_CN              Location_Country = 46
	Location_CX              Location_Country = 47
	Location_CC              Location_Country = 48
	Location_CO              Location_Country = 49
	Location_KM              Location_Country = 50
	Location_CG              Location_Country = 51
	Location_CD              Location_Country = 52
	Location_CK              Location_Country = 53
	Location_CR              Location_Country = 54
	Location_CI              Location_Country = 55
	Location_HR              Location_Country = 56
	Location_CU              Location_Country = 57
	Location_CW              Location_Country = 58
	Location_CY              Location_Country = 59
	Location_CZ              Location_Country = 60
	Location_DK              Location_Country = 61
	Location_DJ              Location_Country = 62
	Location_DM              Location_Country = 63
	Location_DO              Location_Country = 64
	Location_EC              Location_Country = 65
	Location_EG              Location_Country = 66
	Location_SV              Location_Country = 67
	Location_GQ              Location_Country = 68
	Location_ER              Location_Country = 69
	Location_EE              Location_Country = 70
	Location_ET              Location_Country = 71
	Location_FK              Location_Country = 72
	Location_FO              Location_Country = 73
	Location_FJ              Location_Country = 74
	Location_FI              Location_Country = 75
	Location_FR              Location_Country = 76
	Location_GF              Location_Country = 77
	Location_PF              Location_Country = 78
	Location_TF              Location_Country = 79
	Location_GA              Location_Country = 80
	Location_GM              Location_Country = 81
	Location_GE              Location_Country = 82
	Location_DE              Location_Country = 83
	Location_GH              Location_Country = 84
	Location_GI              Location_Country = 85
	Location_GR              Location_Country = 86
	Location_GL              Location_Country = 87
	Location_GD              Location_Country = 88
	Location_GP              Location_Country = 89
	Location_GU              Location_Country = 90
	Location_GT              Location_Country = 91
	Location_GG              Location_Country = 92
	Location_GN              Location_Country = 93
	Location_GW              Location_Country = 94
	Location_GY              Location_Country = 95
	Location_HT              Location_Country = 96
	Location_HM              Location_Country = 97
	Location_VA              Location_Country = 98
	Location_HN              Location_Country = 99
	Location_HK              Location_Country = 100
	Location_HU              Location_Country = 101
	Location_IS              Location_Country = 102
	Location_IN              Location_Country = 103
	Location_ID              Location_Country = 104
	Location_IR              Location_Country = 105
	Location_IQ              Location_Country = 106
	Location_IE              Location_Country = 107
	Location_IM              Location_Country = 108
	Location_IL              Location_Country = 109
	Location_IT              Location_Country = 110
	Location_JM              Location_Country = 111
	Location_JP              Location_Country = 112
	Location_JE              Location_Country = 113
	Location_JO              Location_Country = 114
	Location_KZ              Location_Country = 115
	Location_KE              Location_Country = 116
	Location_KI              Location_Country = 117
	Location_KP              Location_Country = 118
	Location_KR              Location_Country = 119
	Location_KW              Location_Country = 120
	Location_KG              Location_Country = 121
	Location_LA              Location_Country = 122
	Location_LV              Location_Country = 123
	Location_LB              Location_Country = 124
	Location_LS              Location_Country = 125
	Location_LR              Location_Country = 126
	Location_LY              Location_Country = 127
	Location_LI              Location_Country = 128
	Location_LT              Location_Country = 129
	Location_LU              Location_Country = 130
	Location_MO              Location_Country = 131
	Location_MK              Location_Country = 132
	Location_MG              Location_Country = 133
	Location_MW              Location_Country = 134
	Location_MY              Location_Country = 135
	Location_MV              Location_Country = 136
	Location_ML              Location_Country = 137
	Location_MT              Location_Country = 138
	Location_MH              Location_Country = 139
	Location_MQ              Location_Country = 140
	Location_MR              Location_Country = 141
	Location_MU              Location_Country = 142
	Location_YT              Location_Country = 143
	Location_MX              Location_Country = 144
	Location_FM              Location_Country = 145
	Location_MD              Location_Country = 146
	Location_MC              Location_Country = 147
	Location_MN              Location_Country = 148
	Location_ME              Location_Country = 149
	Location_MS              Location_Country = 150
	Location_MA              Location_Country = 151
	Location_MZ              Location_Country = 152
	Location_MM              Location_Country = 153
	Location_NA              Location_Country = 154
	Location_NR              Location_Country = 155
	Location_NP              Location_Country = 156
	Location_NL              Location_Country = 157
	Location_NC              Location_Country = 158
	Location_NZ              Location_Country = 159
	Location_NI              Location_Country = 160
	Location_NE              Location_Country = 161
	Location_NG              Location_Country = 162
	Location_NU              Location_Country = 163
	Location_NF              Location_Country = 164
	Location_MP              Location_Country = 165
	Location_NO              Location_Country = 166
	Location_OM              Location_Country = 167
	Location_PK              Location_Country = 168
	Location_PW              Location_Country = 169
	Location_PS              Location_Country = 170
	Location_PA              Location_Country = 171
	Location_PG              Location_Country = 172
	Location_PY              Location_Country = 173
	Location_PE              Location_Country = 174
	Location_PH              Location_Country = 175
	Location_PN              Location_Country = 176
	Location_PL              Location_Country = 177
	Location_PT              Location_Country = 178
	Location_PR              Location_Country = 179
	Location_QA              Location_Country = 180
	Location_RE              Location_Country = 181
	Location_RO              Location_Country = 182
	Location_RU              Location_Country = 183
	Location_RW              Location_Country = 184
	Location_BL              Location_Country = 185
	Location_SH              Location_Country = 186
	Location_KN              Location_Country = 187
	Location_LC              Location_Country = 188
	Location_MF              Location_Country = 189
	Location_PM              Location_Country = 190
	Location_VC              Location_Country = 191
	Location_WS              Location_Country = 192
	Location_SM              Location_Country = 193
	Location_ST              Location_Country = 194
	Location_SA              Location_Country = 195
	Location_SN              Location_Country = 196
	Location_RS              Location_Country = 197
	Location_SC              Location_Country = 198
	Location_SL              Location_Country = 199
	Location_SG              Location_Country = 200
	Location_SX              Location_Country = 201
	Location_SK              Location_Country = 202
	Location_SI              Location_Country = 203
	Location_SB              Location_Country = 204
	Location_SO              Location_Country = 205
	Location_ZA              Location_Country = 206
	Location_GS              Location_Country = 207
	Location_SS              Location_Country = 208
	Location_ES              Location_Country = 209
	Location_LK              Location_Country = 210
	Location_SD              Location_Country = 211
	Location_SR              Location_Country = 212
	Location_SJ              Location_Country = 213
	Location_SZ              Location_Country = 214
	Location_SE              Location_Country = 215
	Location_CH              Location_Country = 216
	Location_SY              Location_Country = 217
	Location_TW              Location_Country = 218
	Location_TJ              Location_Country = 219
	Location_TZ              Location_Country = 220
	Location_TH              Location_Country = 221
	Location_TL              Location_Country = 222
	Location_TG              Location_Country = 223
	Location_TK              Location_Country = 224
	Location_TO              Location_Country = 225
	Location_TT              Location_Country = 226
	Location_TN              Location_Country = 227
	Location_TR              Location_Country = 228
	Location_TM              Location_Country = 229
	Location_TC              Location_Country = 230
	Location_TV              Location_Country = 231
	Location_UG              Location_Country = 232
	Location_UA              Location_Country = 233
	Location_AE              Location_Country = 234
	Location_GB              Location_Country = 235
	Location_US              Location_Country = 236
	Location_UM              Location_Country = 237
	Location_UY              Location_Country = 238
	Location_UZ              Location_Country = 239
	Location_VU              Location_Country = 240
	Location_VE              Location_Country = 241
	Location_VN              Location_Country = 242
	Location_VG              Location_Country = 243
	Location_VI              Location_Country = 244
	Location_WF              Location_Country = 245
	Location_EH              Location_Country = 246
	Location_YE              Location_Country = 247
	Location_ZM              Location_Country = 248
	Location_ZW              Location_Country = 249
)

var Location_Country_name = map[int32]string{
	0:   "UNKNOWN_COUNTRY",
	1:   "AF",
	2:   "AX",
	3:   "AL",
	4:   "DZ",
	5:   "AS",
	6:   "AD",
	7:   "AO",
	8:   "AI",
	9:   "AQ",
	10:  "AG",
	11:  "AR",
	12:  "AM",
	13:  "AW",
	14:  "AU",
	15:  "AT",
	16:  "AZ",
	17:  "BS",
	18:  "BH",
	19:  "BD",
	20:  "BB",
	21:  "BY",
	22:  "BE",
	23:  "BZ",
	24:  "BJ",
	25:  "BM",
	26:  "BT",
	27:  "BO",
	28:  "BQ",
	29:  "BA",
	30:  "BW",
	31:  "BV",
	32:  "BR",
	33:  "IO",
	34:  "BN",
	35:  "BG",
	36:  "BF",
	37:  "BI",
	38:  "KH",
	39:  "CM",
	40:  "CA",
	41:  "CV",
	42:  "KY",
	43:  "CF",
	44:  "TD",
	45:  "CL",
	46:  "CN",
	47:  "CX",
	48:  "CC",
	49:  "CO",
	50:  "KM",
	51:  "CG",
	52:  "CD",
	53:  "CK",
	54:  "CR",
	55:  "CI",
	56:  "HR",
	57:  "CU",
	58:  "CW",
	59:  "CY",
	60:  "CZ",
	61:  "DK",
	62:  "DJ",
	63:  "DM",
	64:  "DO",
	65:  "EC",
	66:  "EG",
	67:  "SV",
	68:  "GQ",
	69:  "ER",
	70:  "EE",
	71:  "ET",
	72:  "FK",
	73:  "FO",
	74:  "FJ",
	75:  "FI",
	76:  "FR",
	77:  "GF",
	78:  "PF",
	79:  "TF",
	80:  "GA",
	81:  "GM",
	82:  "GE",
	83:  "DE",
	84:  "GH",
	85:  "GI",
	86:  "GR",
	87:  "GL",
	88:  "GD",
	89:  "GP",
	90:  "GU",
	91:  "GT",
	92:  "GG",
	93:  "GN",
	94:  "GW",
	95:  "GY",
	96:  "HT",
	97:  "HM",
	98:  "VA",
	99:  "HN",
	100: "HK",
	101: "HU",
	102: "IS",
	103: "IN",
	104: "ID",
	105: "IR",
	106: "IQ",
	107: "IE",
	108: "IM",
	109: "IL",
	110: "IT",
	111: "JM",
	112: "JP",
	113: "JE",
	114: "JO",
	115: "KZ",
	116: "KE",
	117: "KI",
	118: "KP",
	119: "KR",
	120: "KW",
	121: "KG",
	122: "LA",
	123: "LV",
	124: "LB",
	125: "LS",
	126: "LR",
	127: "LY",
	128: "LI",
	129: "LT",
	130: "LU",
	131: "MO",
	132: "MK",
	133: "MG",
	134: "MW",
	135: "MY",
	136: "MV",
	137: "ML",
	138: "MT",
	139: "MH",
	140: "MQ",
	141: "MR",
	142: "MU",
	143: "YT",
	144: "MX",
	145: "FM",
	146: "MD",
	147: "MC",
	148: "MN",
	149: "ME",
	150: "MS",
	151: "MA",
	152: "MZ",
	153: "MM",
	154: "NA",
	155: "NR",
	156: "NP",
	157: "NL",
	158: "NC",
	159: "NZ",
	160: "NI",
	161: "NE",
	162: "NG",
	163: "NU",
	164: "NF",
	165: "MP",
	166: "NO",
	167: "OM",
	168: "PK",
	169: "PW",
	170: "PS",
	171: "PA",
	172: "PG",
	173: "PY",
	174: "PE",
	175: "PH",
	176: "PN",
	177: "PL",
	178: "PT",
	179: "PR",
	180: "QA",
	181: "RE",
	182: "RO",
	183: "RU",
	184: "RW",
	185: "BL",
	186: "SH",
	187: "KN",
	188: "LC",
	189: "MF",
	190: "PM",
	191: "VC",
	192: "WS",
	193: "SM",
	194: "ST",
	195: "SA",
	196: "SN",
	197: "RS",
	198: "SC",
	199: "SL",
	200: "SG",
	201: "SX",
	202: "SK",
	203: "SI",
	204: "SB",
	205: "SO",
	206: "ZA",
	207: "GS",
	208: "SS",
	209: "ES",
	210: "LK",
	211: "SD",
	212: "SR",
	213: "SJ",
	214: "SZ",
	215: "SE",
	216: "CH",
	217: "SY",
	218: "TW",
	219: "TJ",
	220: "TZ",
	221: "TH",
	222: "TL",
	223: "TG",
	224: "TK",
	225: "TO",
	226: "TT",
	227: "TN",
	228: "TR",
	229: "TM",
	230: "TC",
	231: "TV",
	232: "UG",
	233: "UA",
	234: "AE",
	235: "GB",
	236: "US",
	237: "UM",
	238: "UY",
	239: "UZ",
	240: "VU",
	241: "VE",
	242: "VN",
	243: "VG",
	244: "VI",
	245: "WF",
	246: "EH",
	247: "YE",
	248: "ZM",
	249: "ZW",
}

var Location_Country_value = map[string]int32{
	"UNKNOWN_COUNTRY": 0,
	"AF":              1,
	"AX":              2,
	"AL":              3,
	"DZ":              4,
	"AS":              5,
	"AD":              6,
	"AO":              7,
	"AI":              8,
	"AQ":              9,
	"AG":              10,
	"AR":              11,
	"AM":              12,
	"AW":              13,
	"AU":              14,
	"AT":              15,
	"AZ":              16,
	"BS":              17,
	"BH":              18,
	"BD":              19,
	"BB":              20,
	"BY":              21,
	"BE":              22,
	"BZ":              23,
	"BJ":              24,
	"BM":              25,
	"BT":              26,
	"BO":              27,
	"BQ":              28,
	"BA":              29,
	"BW":              30,
	"BV":              31,
	"BR":              32,
	"IO":              33,
	"BN":              34,
	"BG":              35,
	"BF":              36,
	"BI":              37,
	"KH":              38,
	"CM":              39,
	"CA":              40,
	"CV":              41,
	"KY":              42,
	"CF":              43,
	"TD":              44,
	"CL":              45,
	"CN":              46,
	"CX":              47,
	"CC":              48,
	"CO":              49,
	"KM":              50,
	"CG":              51,
	"CD":              52,
	"CK":              53,
	"CR":              54,
	"CI":              55,
	"HR":              56,
	"CU":              57,
	"CW":              58,
	"CY":              59,
	"CZ":              60,
	"DK":              61,
	"DJ":              62,
	"DM":              63,
	"DO":              64,
	"EC":              65,
	"EG":              66,
	"SV":              67,
	"GQ":              68,
	"ER":              69,
	"EE":              70,
	"ET":              71,
	"FK":              72,
	"FO":              73,
	"FJ":              74,
	"FI":              75,
	"FR":              76,
	"GF":              77,
	"PF":              78,
	"TF":              79,
	"GA":              80,
	"GM":              81,
	"GE":              82,
	"DE":              83,
	"GH":              84,
	"GI":              85,
	"GR":              86,
	"GL":              87,
	"GD":              88,
	"GP":              89,
	"GU":              90,
	"GT":              91,
	"GG":              92,
	"GN":              93,
	"GW":              94,
	"GY":              95,
	"HT":              96,
	"HM":              97,
	"VA":              98,
	"HN":              99,
	"HK":              100,
	"HU":              101,
	"IS":              102,
	"IN":              103,
	"ID":              104,
	"IR":              105,
	"IQ":              106,
	"IE":              107,
	"IM":              108,
	"IL":              109,
	"IT":              110,
	"JM":              111,
	"JP":              112,
	"JE":              113,
	"JO":              114,
	"KZ":              115,
	"KE":              116,
	"KI":              117,
	"KP":              118,
	"KR":              119,
	"KW":              120,
	"KG":              121,
	"LA":              122,
	"LV":              123,
	"LB":              124,
	"LS":              125,
	"LR":              126,
	"LY":              127,
	"LI":              128,
	"LT":              129,
	"LU":              130,
	"MO":              131,
	"MK":              132,
	"MG":              133,
	"MW":              134,
	"MY":              135,
	"MV":              136,
	"ML":              137,
	"MT":              138,
	"MH":              139,
	"MQ":              140,
	"MR":              141,
	"MU":              142,
	"YT":              143,
	"MX":              144,
	"FM":              145,
	"MD":              146,
	"MC":              147,
	"MN":              148,
	"ME":              149,
	"MS":              150,
	"MA":              151,
	"MZ":              152,
	"MM":              153,
	"NA":              154,
	"NR":              155,
	"NP":              156,
	"NL":              157,
	"NC":              158,
	"NZ":              159,
	"NI":              160,
	"NE":              161,
	"NG":              162,
	"NU":              163,
	"NF":              164,
	"MP":              165,
	"NO":              166,
	"OM":              167,
	"PK":              168,
	"PW":              169,
	"PS":              170,
	"PA":              171,
	"PG":              172,
	"PY":              173,
	"PE":              174,
	"PH":              175,
	"PN":              176,
	"PL":              177,
	"PT":              178,
	"PR":              179,
	"QA":              180,
	"RE":              181,
	"RO":              182,
	"RU":              183,
	"RW":              184,
	"BL":              185,
	"SH":              186,
	"KN":              187,
	"LC":              188,
	"MF":              189,
	"PM":              190,
	"VC":              191,
	"WS":              192,
	"SM":              193,
	"ST":              194,
	"SA":              195,
	"SN":              196,
	"RS":              197,
	"SC":              198,
	"SL":              199,
	"SG":              200,
	"SX":              201,
	"SK":              202,
	"SI":              203,
	"SB":              204,
	"SO":              205,
	"ZA":              206,
	"GS":              207,
	"SS":              208,
	"ES":              209,
	"LK":              210,
	"SD":              211,
	"SR":              212,
	"SJ":              213,
	"SZ":              214,
	"SE":              215,
	"CH":              216,
	"SY":              217,
	"TW":              218,
	"TJ":              219,
	"TZ":              220,
	"TH":              221,
	"TL":              222,
	"TG":              223,
	"TK":              224,
	"TO":              225,
	"TT":              226,
	"TN":              227,
	"TR":              228,
	"TM":              229,
	"TC":              230,
	"TV":              231,
	"UG":              232,
	"UA":              233,
	"AE":              234,
	"GB":              235,
	"US":              236,
	"UM":              237,
	"UY":              238,
	"UZ":              239,
	"VU":              240,
	"VE":              241,
	"VN":              242,
	"VG":              243,
	"VI":              244,
	"WF":              245,
	"EH":              246,
	"YE":              247,
	"ZM":              248,
	"ZW":              249,
}

func (x Location_Country) String() string {
	return proto.EnumName(Location_Country_name, int32(x))
}

func (Location_Country) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{9, 0}
}

type Claim struct {
	// Types that are valid to be assigned to Type:
	//	*Claim_Stream
	//	*Claim_Channel
	Type                 isClaim_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{0}
}

func (m *Claim) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Claim.Unmarshal(m, b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return xxx_messageInfo_Claim.Size(m)
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

type isClaim_Type interface {
	isClaim_Type()
}

type Claim_Stream struct {
	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3,oneof"`
}

type Claim_Channel struct {
	Channel *Channel `protobuf:"bytes,2,opt,name=channel,proto3,oneof"`
}

func (*Claim_Stream) isClaim_Type() {}

func (*Claim_Channel) isClaim_Type() {}

func (m *Claim) GetType() isClaim_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Claim) GetStream() *Stream {
	if x, ok := m.GetType().(*Claim_Stream); ok {
		return x.Stream
	}
	return nil
}

func (m *Claim) GetChannel() *Channel {
	if x, ok := m.GetType().(*Claim_Channel); ok {
		return x.Channel
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Claim) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Claim_OneofMarshaler, _Claim_OneofUnmarshaler, _Claim_OneofSizer, []interface{}{
		(*Claim_Stream)(nil),
		(*Claim_Channel)(nil),
	}
}

func _Claim_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Claim)
	// type
	switch x := m.Type.(type) {
	case *Claim_Stream:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Stream); err != nil {
			return err
		}
	case *Claim_Channel:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Channel); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Claim.Type has unexpected type %T", x)
	}
	return nil
}

func _Claim_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Claim)
	switch tag {
	case 1: // type.stream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Stream)
		err := b.DecodeMessage(msg)
		m.Type = &Claim_Stream{msg}
		return true, err
	case 2: // type.channel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Channel)
		err := b.DecodeMessage(msg)
		m.Type = &Claim_Channel{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Claim_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Claim)
	// type
	switch x := m.Type.(type) {
	case *Claim_Stream:
		s := proto.Size(x.Stream)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Claim_Channel:
		s := proto.Size(x.Channel)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Channel struct {
	PublicKey            []byte      `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Title                string      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description          string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ThumbnailUrl         string      `protobuf:"bytes,4,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	Tags                 []string    `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Languages            []*Language `protobuf:"bytes,6,rep,name=languages,proto3" json:"languages,omitempty"`
	Locations            []*Location `protobuf:"bytes,7,rep,name=locations,proto3" json:"locations,omitempty"`
	ContactEmail         string      `protobuf:"bytes,8,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	HomepageUrl          string      `protobuf:"bytes,9,opt,name=homepage_url,json=homepageUrl,proto3" json:"homepage_url,omitempty"`
	CoverUrl             string      `protobuf:"bytes,10,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{1}
}

func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Channel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Channel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Channel) GetThumbnailUrl() string {
	if m != nil {
		return m.ThumbnailUrl
	}
	return ""
}

func (m *Channel) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Channel) GetLanguages() []*Language {
	if m != nil {
		return m.Languages
	}
	return nil
}

func (m *Channel) GetLocations() []*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *Channel) GetContactEmail() string {
	if m != nil {
		return m.ContactEmail
	}
	return ""
}

func (m *Channel) GetHomepageUrl() string {
	if m != nil {
		return m.HomepageUrl
	}
	return ""
}

func (m *Channel) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

type Stream struct {
	SdHash       []byte      `protobuf:"bytes,1,opt,name=sd_hash,json=sdHash,proto3" json:"sd_hash,omitempty"`
	Title        string      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description  string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ThumbnailUrl string      `protobuf:"bytes,4,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	Tags         []string    `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Languages    []*Language `protobuf:"bytes,6,rep,name=languages,proto3" json:"languages,omitempty"`
	Locations    []*Location `protobuf:"bytes,7,rep,name=locations,proto3" json:"locations,omitempty"`
	Author       string      `protobuf:"bytes,8,opt,name=author,proto3" json:"author,omitempty"`
	License      string      `protobuf:"bytes,9,opt,name=license,proto3" json:"license,omitempty"`
	LicenseUrl   string      `protobuf:"bytes,10,opt,name=license_url,json=licenseUrl,proto3" json:"license_url,omitempty"`
	ReleaseTime  int64       `protobuf:"varint,11,opt,name=release_time,json=releaseTime,proto3" json:"release_time,omitempty"`
	MediaType    string      `protobuf:"bytes,13,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	File         *File       `protobuf:"bytes,14,opt,name=file,proto3" json:"file,omitempty"`
	Fee          *Fee        `protobuf:"bytes,15,opt,name=fee,proto3" json:"fee,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Stream_Image
	//	*Stream_Video
	//	*Stream_Audio
	Type                 isStream_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Stream) Reset()         { *m = Stream{} }
func (m *Stream) String() string { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()    {}
func (*Stream) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{2}
}

func (m *Stream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stream.Unmarshal(m, b)
}
func (m *Stream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stream.Marshal(b, m, deterministic)
}
func (m *Stream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stream.Merge(m, src)
}
func (m *Stream) XXX_Size() int {
	return xxx_messageInfo_Stream.Size(m)
}
func (m *Stream) XXX_DiscardUnknown() {
	xxx_messageInfo_Stream.DiscardUnknown(m)
}

var xxx_messageInfo_Stream proto.InternalMessageInfo

func (m *Stream) GetSdHash() []byte {
	if m != nil {
		return m.SdHash
	}
	return nil
}

func (m *Stream) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Stream) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Stream) GetThumbnailUrl() string {
	if m != nil {
		return m.ThumbnailUrl
	}
	return ""
}

func (m *Stream) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Stream) GetLanguages() []*Language {
	if m != nil {
		return m.Languages
	}
	return nil
}

func (m *Stream) GetLocations() []*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *Stream) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Stream) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Stream) GetLicenseUrl() string {
	if m != nil {
		return m.LicenseUrl
	}
	return ""
}

func (m *Stream) GetReleaseTime() int64 {
	if m != nil {
		return m.ReleaseTime
	}
	return 0
}

func (m *Stream) GetMediaType() string {
	if m != nil {
		return m.MediaType
	}
	return ""
}

func (m *Stream) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *Stream) GetFee() *Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

type isStream_Type interface {
	isStream_Type()
}

type Stream_Image struct {
	Image *Image `protobuf:"bytes,16,opt,name=image,proto3,oneof"`
}

type Stream_Video struct {
	Video *Video `protobuf:"bytes,17,opt,name=video,proto3,oneof"`
}

type Stream_Audio struct {
	Audio *Audio `protobuf:"bytes,18,opt,name=audio,proto3,oneof"`
}

func (*Stream_Image) isStream_Type() {}

func (*Stream_Video) isStream_Type() {}

func (*Stream_Audio) isStream_Type() {}

func (m *Stream) GetType() isStream_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Stream) GetImage() *Image {
	if x, ok := m.GetType().(*Stream_Image); ok {
		return x.Image
	}
	return nil
}

func (m *Stream) GetVideo() *Video {
	if x, ok := m.GetType().(*Stream_Video); ok {
		return x.Video
	}
	return nil
}

func (m *Stream) GetAudio() *Audio {
	if x, ok := m.GetType().(*Stream_Audio); ok {
		return x.Audio
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Stream) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Stream_OneofMarshaler, _Stream_OneofUnmarshaler, _Stream_OneofSizer, []interface{}{
		(*Stream_Image)(nil),
		(*Stream_Video)(nil),
		(*Stream_Audio)(nil),
	}
}

func _Stream_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Stream)
	// type
	switch x := m.Type.(type) {
	case *Stream_Image:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Image); err != nil {
			return err
		}
	case *Stream_Video:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Video); err != nil {
			return err
		}
	case *Stream_Audio:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Audio); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Stream.Type has unexpected type %T", x)
	}
	return nil
}

func _Stream_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Stream)
	switch tag {
	case 16: // type.image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Image)
		err := b.DecodeMessage(msg)
		m.Type = &Stream_Image{msg}
		return true, err
	case 17: // type.video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Video)
		err := b.DecodeMessage(msg)
		m.Type = &Stream_Video{msg}
		return true, err
	case 18: // type.audio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Audio)
		err := b.DecodeMessage(msg)
		m.Type = &Stream_Audio{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Stream_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Stream)
	// type
	switch x := m.Type.(type) {
	case *Stream_Image:
		s := proto.Size(x.Image)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Stream_Video:
		s := proto.Size(x.Video)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Stream_Audio:
		s := proto.Size(x.Audio)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Fee struct {
	Currency             Fee_Currency `protobuf:"varint,1,opt,name=currency,proto3,enum=pb.Fee_Currency" json:"currency,omitempty"`
	Address              []byte       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Amount               uint64       `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Fee) Reset()         { *m = Fee{} }
func (m *Fee) String() string { return proto.CompactTextString(m) }
func (*Fee) ProtoMessage()    {}
func (*Fee) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{3}
}

func (m *Fee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fee.Unmarshal(m, b)
}
func (m *Fee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fee.Marshal(b, m, deterministic)
}
func (m *Fee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fee.Merge(m, src)
}
func (m *Fee) XXX_Size() int {
	return xxx_messageInfo_Fee.Size(m)
}
func (m *Fee) XXX_DiscardUnknown() {
	xxx_messageInfo_Fee.DiscardUnknown(m)
}

var xxx_messageInfo_Fee proto.InternalMessageInfo

func (m *Fee) GetCurrency() Fee_Currency {
	if m != nil {
		return m.Currency
	}
	return Fee_UNKNOWN_CURRENCY
}

func (m *Fee) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Fee) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type File struct {
	Hash                 []byte   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                 uint64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{4}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Image struct {
	Width                uint32   `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height               uint32   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{5}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Image) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Video struct {
	Width                uint32   `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height               uint32   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Duration             uint32   `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Video) Reset()         { *m = Video{} }
func (m *Video) String() string { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()    {}
func (*Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{6}
}

func (m *Video) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Video.Unmarshal(m, b)
}
func (m *Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Video.Marshal(b, m, deterministic)
}
func (m *Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Video.Merge(m, src)
}
func (m *Video) XXX_Size() int {
	return xxx_messageInfo_Video.Size(m)
}
func (m *Video) XXX_DiscardUnknown() {
	xxx_messageInfo_Video.DiscardUnknown(m)
}

var xxx_messageInfo_Video proto.InternalMessageInfo

func (m *Video) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Video) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Video) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type Audio struct {
	Duration             uint32   `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Audio) Reset()         { *m = Audio{} }
func (m *Audio) String() string { return proto.CompactTextString(m) }
func (*Audio) ProtoMessage()    {}
func (*Audio) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{7}
}

func (m *Audio) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Audio.Unmarshal(m, b)
}
func (m *Audio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Audio.Marshal(b, m, deterministic)
}
func (m *Audio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Audio.Merge(m, src)
}
func (m *Audio) XXX_Size() int {
	return xxx_messageInfo_Audio.Size(m)
}
func (m *Audio) XXX_DiscardUnknown() {
	xxx_messageInfo_Audio.DiscardUnknown(m)
}

var xxx_messageInfo_Audio proto.InternalMessageInfo

func (m *Audio) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// RFC 5646
type Language struct {
	Language             Language_Language `protobuf:"varint,1,opt,name=language,proto3,enum=pb.Language_Language" json:"language,omitempty"`
	Script               Language_Script   `protobuf:"varint,2,opt,name=script,proto3,enum=pb.Language_Script" json:"script,omitempty"`
	Region               Location_Country  `protobuf:"varint,3,opt,name=region,proto3,enum=pb.Location_Country" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Language) Reset()         { *m = Language{} }
func (m *Language) String() string { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()    {}
func (*Language) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{8}
}

func (m *Language) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Language.Unmarshal(m, b)
}
func (m *Language) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Language.Marshal(b, m, deterministic)
}
func (m *Language) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Language.Merge(m, src)
}
func (m *Language) XXX_Size() int {
	return xxx_messageInfo_Language.Size(m)
}
func (m *Language) XXX_DiscardUnknown() {
	xxx_messageInfo_Language.DiscardUnknown(m)
}

var xxx_messageInfo_Language proto.InternalMessageInfo

func (m *Language) GetLanguage() Language_Language {
	if m != nil {
		return m.Language
	}
	return Language_UNKNOWN_LANGUAGE
}

func (m *Language) GetScript() Language_Script {
	if m != nil {
		return m.Script
	}
	return Language_UNKNOWN_SCRIPT
}

func (m *Language) GetRegion() Location_Country {
	if m != nil {
		return m.Region
	}
	return Location_UNKNOWN_COUNTRY
}

type Location struct {
	Country              Location_Country `protobuf:"varint,1,opt,name=country,proto3,enum=pb.Location_Country" json:"country,omitempty"`
	State                string           `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	City                 string           `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	Code                 string           `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Latitude             int32            `protobuf:"zigzag32,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            int32            `protobuf:"zigzag32,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae86789b513b1db, []int{9}
}

func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetCountry() Location_Country {
	if m != nil {
		return m.Country
	}
	return Location_UNKNOWN_COUNTRY
}

func (m *Location) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Location) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Location) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Location) GetLatitude() int32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() int32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func init() {
	proto.RegisterEnum("pb.Fee_Currency", Fee_Currency_name, Fee_Currency_value)
	proto.RegisterEnum("pb.Language_Language", Language_Language_name, Language_Language_value)
	proto.RegisterEnum("pb.Language_Script", Language_Script_name, Language_Script_value)
	proto.RegisterEnum("pb.Location_Country", Location_Country_name, Location_Country_value)
	proto.RegisterType((*Claim)(nil), "pb.Claim")
	proto.RegisterType((*Channel)(nil), "pb.Channel")
	proto.RegisterType((*Stream)(nil), "pb.Stream")
	proto.RegisterType((*Fee)(nil), "pb.Fee")
	proto.RegisterType((*File)(nil), "pb.File")
	proto.RegisterType((*Image)(nil), "pb.Image")
	proto.RegisterType((*Video)(nil), "pb.Video")
	proto.RegisterType((*Audio)(nil), "pb.Audio")
	proto.RegisterType((*Language)(nil), "pb.Language")
	proto.RegisterType((*Location)(nil), "pb.Location")
}

func init() { proto.RegisterFile("claim.proto", fileDescriptor_bae86789b513b1db) }

var fileDescriptor_bae86789b513b1db = []byte{
	// 3551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x99, 0x57, 0x78, 0x23, 0xd7,
	0x79, 0x86, 0x97, 0x9d, 0x18, 0xee, 0xae, 0x3e, 0x41, 0xb2, 0x4c, 0x35, 0x6b, 0x45, 0xc9, 0xd6,
	0x5a, 0x92, 0xd7, 0xd6, 0xca, 0x72, 0x53, 0x5c, 0x80, 0x21, 0x08, 0x80, 0xc0, 0x80, 0xe0, 0x00,
	0x20, 0x97, 0x74, 0xa2, 0xf5, 0x01, 0x66, 0x38, 0x33, 0xc4, 0x14, 0x68, 0x0a, 0xb8, 0xa0, 0x63,
	0xa7, 0xf7, 0x5e, 0x9c, 0xc4, 0xe9, 0x71, 0xaa, 0x9d, 0xde, 0x9d, 0xde, 0xe3, 0xf4, 0x1e, 0xa7,
	0x27, 0x76, 0x7a, 0xef, 0xf5, 0x2e, 0xcf, 0xff, 0xff, 0x87, 0xbb, 0xeb, 0x3c, 0xb9, 0xc9, 0x6d,
	0xae, 0xbe, 0x77, 0xce, 0x39, 0xe0, 0x1c, 0x4c, 0xd9, 0xef, 0x79, 0xb1, 0xc6, 0xda, 0x28, 0x54,
	0x41, 0x74, 0x65, 0x92, 0x26, 0x79, 0x52, 0x9e, 0x9f, 0x0c, 0x37, 0x9e, 0x33, 0x96, 0x4c, 0x1a,
	0x2a, 0x3f, 0x6a, 0x2c, 0x67, 0x79, 0xea, 0xaa, 0x68, 0x7d, 0xee, 0xd2, 0xdc, 0xe5, 0xb5, 0xab,
	0xc6, 0x95, 0xc9, 0xf0, 0x4a, 0x8f, 0x47, 0x1a, 0xe7, 0x6c, 0x3d, 0x57, 0x7e, 0xcc, 0x58, 0x19,
	0xf9, 0x2a, 0x8e, 0xdd, 0x70, 0x7d, 0x9e, 0x97, 0xad, 0xd1, 0x32, 0x53, 0x86, 0x1a, 0xe7, 0xec,
	0xb3, 0xd9, 0xea, 0xb2, 0xb1, 0x98, 0xcf, 0x26, 0xee, 0xc6, 0xfb, 0xe7, 0x8d, 0x15, 0x3d, 0x5d,
	0x7e, 0xd0, 0x30, 0x26, 0xc5, 0x30, 0x0c, 0x46, 0xd7, 0xc7, 0xee, 0x8c, 0x4f, 0x73, 0xde, 0x2e,
	0xc9, 0x48, 0xcb, 0x9d, 0x95, 0xef, 0x36, 0x96, 0xf2, 0x20, 0x0f, 0x5d, 0xfe, 0xcb, 0x25, 0x5b,
	0x0e, 0xca, 0x97, 0x8c, 0x35, 0xc7, 0xcd, 0x46, 0x69, 0x30, 0xc9, 0x83, 0x24, 0x5e, 0x5f, 0xe0,
	0xb9, 0xdb, 0x87, 0xca, 0x8f, 0x18, 0x17, 0x72, 0xbf, 0x88, 0x86, 0xb1, 0x0a, 0xc2, 0xeb, 0x45,
	0x1a, 0xae, 0x2f, 0xf2, 0x9a, 0xf3, 0x37, 0x07, 0x07, 0x69, 0x58, 0x2e, 0x1b, 0x8b, 0xb9, 0xf2,
	0xb2, 0xf5, 0xa5, 0x4b, 0x0b, 0x97, 0x4b, 0x36, 0x73, 0xf9, 0x71, 0xa3, 0x14, 0xaa, 0xd8, 0x2b,
	0x94, 0xe7, 0x66, 0xeb, 0xcb, 0x97, 0x16, 0x2e, 0xaf, 0x5d, 0x3d, 0x4f, 0x5f, 0xa7, 0xad, 0x07,
	0xed, 0x5b, 0xd3, 0xbc, 0x36, 0x19, 0x29, 0x3a, 0x61, 0xb6, 0xbe, 0x72, 0xdb, 0x5a, 0x3d, 0x68,
	0xdf, 0x9a, 0xa6, 0x0d, 0x8d, 0x92, 0x38, 0x57, 0xa3, 0xfc, 0xba, 0x1b, 0xa9, 0x20, 0x5c, 0x5f,
	0x95, 0x0d, 0xe9, 0xc1, 0x1a, 0x8d, 0x95, 0x1f, 0x36, 0xce, 0xfb, 0x49, 0xe4, 0x4e, 0x94, 0xe7,
	0xf2, 0xa6, 0x4b, 0xf2, 0xc5, 0xce, 0xc6, 0x68, 0xcf, 0xf7, 0x1b, 0xa5, 0x51, 0x32, 0x75, 0x53,
	0x9e, 0x37, 0x78, 0x7e, 0x95, 0x07, 0x06, 0x69, 0xb8, 0xf1, 0xee, 0x45, 0x63, 0x59, 0x6e, 0x4f,
	0xf9, 0x85, 0xc6, 0x4a, 0xe6, 0x5c, 0xf7, 0x55, 0xe6, 0xeb, 0x8b, 0xba, 0x9c, 0x39, 0x0d, 0x95,
	0xf9, 0xff, 0x7f, 0xae, 0xe8, 0x3d, 0xc6, 0xb2, 0x2a, 0x72, 0x3f, 0x49, 0xf5, 0xa5, 0xd4, 0x47,
	0xe5, 0x75, 0x63, 0x25, 0x0c, 0x46, 0x6e, 0x9c, 0xb9, 0xfa, 0xfa, 0x9d, 0x1d, 0x96, 0x1f, 0x32,
	0xd6, 0x34, 0xde, 0x76, 0xf5, 0x0c, 0x3d, 0x44, 0xdb, 0x7f, 0xd8, 0x38, 0x9f, 0xba, 0xa1, 0xab,
	0x32, 0xf7, 0x7a, 0x1e, 0x44, 0xee, 0xfa, 0xda, 0xa5, 0xb9, 0xcb, 0x0b, 0xf6, 0x9a, 0x1e, 0xeb,
	0x07, 0x91, 0x4b, 0xcf, 0x6b, 0xe4, 0x3a, 0x81, 0xba, 0x4e, 0x4f, 0xf2, 0xfa, 0x05, 0xfe, 0x13,
	0x25, 0x1e, 0xe9, 0xcf, 0x26, 0x6e, 0xf9, 0x01, 0x63, 0xf1, 0x28, 0x08, 0xdd, 0xf5, 0x8b, 0xfc,
	0x22, 0xac, 0xd2, 0xde, 0xb7, 0x82, 0xd0, 0xb5, 0x79, 0xb4, 0x7c, 0xaf, 0xb1, 0x70, 0xe4, 0xba,
	0xeb, 0x77, 0xf0, 0xe4, 0x0a, 0x4f, 0xba, 0xae, 0x4d, 0x63, 0xe5, 0x87, 0x8d, 0xa5, 0x20, 0x52,
	0x9e, 0xbb, 0x0e, 0x9e, 0x2c, 0xd1, 0x64, 0x93, 0x06, 0x1a, 0xe7, 0x6c, 0x99, 0xa1, 0x25, 0xd3,
	0xc0, 0x71, 0x93, 0xf5, 0x3b, 0x6f, 0x2d, 0xd9, 0xa3, 0x01, 0x5a, 0xc2, 0x33, 0xb4, 0x44, 0x15,
	0x4e, 0x90, 0xac, 0x97, 0x6f, 0x2d, 0xa9, 0xd0, 0x00, 0x2d, 0xe1, 0x99, 0x9b, 0x2f, 0xe1, 0xbb,
	0xe6, 0x8c, 0x85, 0x2d, 0xd7, 0x2d, 0x3f, 0x69, 0xac, 0x8e, 0x8a, 0x34, 0x75, 0xe3, 0x91, 0xbc,
	0x7e, 0x17, 0xaf, 0x42, 0x6f, 0xec, 0x8a, 0xa9, 0xc7, 0xed, 0x9b, 0x2b, 0xe8, 0xe2, 0x2a, 0xc7,
	0x49, 0xdd, 0x2c, 0xe3, 0xe7, 0xe7, 0xbc, 0x7d, 0x76, 0xc8, 0xb7, 0x23, 0x4a, 0x8a, 0x38, 0xe7,
	0x87, 0x67, 0xd1, 0xd6, 0x47, 0x1b, 0xcf, 0x1a, 0xab, 0x67, 0x7f, 0xa7, 0x7c, 0xb7, 0x81, 0x41,
	0xa7, 0xd5, 0xd9, 0xd9, 0xef, 0x5c, 0x37, 0x07, 0xb6, 0x5d, 0xeb, 0x98, 0x07, 0x38, 0x57, 0x5e,
	0x31, 0x16, 0xda, 0x55, 0x13, 0x73, 0x04, 0xd5, 0xbe, 0x89, 0x79, 0x82, 0x41, 0x6f, 0x13, 0x0b,
	0x1b, 0x55, 0x63, 0x91, 0x2e, 0x1f, 0x3d, 0x57, 0xfc, 0x28, 0x2f, 0xf0, 0x39, 0x99, 0x69, 0x2c,
	0x56, 0x91, 0xcb, 0x9b, 0x2e, 0xd9, 0xcc, 0x34, 0x96, 0x05, 0xa7, 0xf2, 0x6c, 0x2f, 0xda, 0xcc,
	0x1b, 0xcf, 0x18, 0x4b, 0x7c, 0x21, 0xe9, 0xc9, 0x3f, 0x09, 0x9c, 0x5c, 0x5e, 0x88, 0x0b, 0xb6,
	0x1c, 0xd0, 0xbe, 0x7d, 0x37, 0xf0, 0xfc, 0x9c, 0x3f, 0x74, 0xc1, 0xd6, 0x47, 0x1b, 0xbb, 0xc6,
	0x12, 0x5f, 0xdc, 0xff, 0xdb, 0xc7, 0xca, 0xf7, 0x19, 0xab, 0x4e, 0x91, 0xaa, 0x9b, 0x6f, 0xd1,
	0x05, 0xfb, 0xe6, 0xf1, 0xc6, 0x23, 0xc6, 0x12, 0xdf, 0x8c, 0x0f, 0x59, 0x34, 0xf7, 0x3f, 0x16,
	0x7d, 0xf0, 0x41, 0x63, 0xf5, 0xec, 0xd5, 0x28, 0x3f, 0x65, 0xac, 0x9e, 0xbd, 0x1c, 0xfa, 0xe6,
	0xbc, 0xe0, 0xf6, 0x57, 0xe7, 0xd6, 0x3b, 0x74, 0x73, 0x59, 0xf9, 0x09, 0x63, 0x59, 0x5e, 0x5a,
	0xde, 0xd8, 0xc5, 0xab, 0x77, 0x7d, 0xc8, 0x07, 0x7a, 0x3c, 0x65, 0xeb, 0x25, 0xe5, 0x27, 0x8d,
	0xe5, 0xd4, 0xf5, 0xce, 0xf6, 0x7a, 0xf1, 0xea, 0xdd, 0xb7, 0xbf, 0x6c, 0x57, 0x4c, 0xba, 0x81,
	0xe9, 0xcc, 0xd6, 0x6b, 0x36, 0xde, 0x79, 0xfe, 0xb6, 0xad, 0xdd, 0x76, 0x2f, 0xdb, 0x95, 0x4e,
	0x7d, 0x50, 0xa9, 0xd7, 0x70, 0xae, 0xbc, 0x6c, 0xcc, 0xbb, 0x31, 0xe6, 0x28, 0x95, 0xc2, 0x3c,
	0xe7, 0x10, 0x0b, 0x9c, 0x2e, 0x16, 0x39, 0x8f, 0xb0, 0xc4, 0x39, 0xc6, 0x32, 0x67, 0x84, 0x15,
	0xce, 0x18, 0xab, 0x9c, 0x29, 0x4a, 0x9c, 0x19, 0x0c, 0xce, 0x29, 0xd6, 0x38, 0x67, 0x38, 0xcf,
	0x79, 0x8a, 0x0b, 0x94, 0x43, 0x85, 0x8b, 0x9c, 0x2e, 0xee, 0xe0, 0xf4, 0x00, 0x4e, 0x1f, 0x77,
	0x72, 0x06, 0x28, 0x73, 0x46, 0xb8, 0x8b, 0x33, 0xc6, 0xdd, 0x9c, 0x09, 0x5e, 0xc0, 0x99, 0xe2,
	0x1e, 0xce, 0x0c, 0x2f, 0xa4, 0x1c, 0x29, 0xac, 0x73, 0xba, 0xb8, 0x97, 0xd3, 0xc7, 0x7d, 0x9c,
	0x09, 0xee, 0xe7, 0x4c, 0xf1, 0x00, 0x67, 0x86, 0x07, 0x39, 0x0b, 0xbc, 0x88, 0x73, 0x8a, 0x87,
	0x38, 0x67, 0xb8, 0x44, 0xe9, 0x28, 0x3c, 0xcc, 0xe9, 0x62, 0x83, 0x73, 0x8a, 0x47, 0x38, 0x4f,
	0xf1, 0x28, 0x5f, 0x1f, 0x17, 0x2f, 0xe6, 0x0c, 0xf1, 0x12, 0xce, 0x04, 0x8f, 0x71, 0x66, 0xb8,
	0xcc, 0x99, 0xe3, 0xa5, 0x9c, 0x05, 0x1e, 0xa7, 0x3c, 0x52, 0x78, 0x82, 0xf3, 0x08, 0x4f, 0x72,
	0x06, 0x78, 0x19, 0xe7, 0x31, 0xae, 0x70, 0x26, 0x78, 0x39, 0x67, 0x8a, 0x57, 0x70, 0xce, 0xf0,
	0x14, 0xa5, 0xa7, 0x70, 0x95, 0xd3, 0xc1, 0xd3, 0x9c, 0x21, 0x5e, 0xc9, 0x19, 0xe3, 0x19, 0xce,
	0x02, 0xaf, 0xe2, 0x9c, 0xe2, 0xd5, 0x94, 0xbe, 0xc2, 0x6b, 0x38, 0x5d, 0xbc, 0x96, 0x33, 0xc0,
	0xeb, 0x38, 0x13, 0x3c, 0xcb, 0x99, 0xe2, 0xc3, 0x38, 0x73, 0xbc, 0x9e, 0xb3, 0xc0, 0x1b, 0x38,
	0x67, 0x78, 0x23, 0xe7, 0x29, 0xde, 0x44, 0x19, 0x28, 0x54, 0x38, 0x1d, 0x54, 0x39, 0x5d, 0x98,
	0x9c, 0x1e, 0x36, 0x39, 0x03, 0xd4, 0x38, 0xc7, 0xd8, 0xe2, 0x4c, 0x50, 0xe7, 0xcc, 0xd0, 0xe0,
	0xcc, 0xd1, 0xe4, 0x2c, 0xb0, 0x4d, 0x79, 0xac, 0xd0, 0xe2, 0x9c, 0xa2, 0x4d, 0x39, 0x56, 0xb0,
	0x38, 0x3d, 0x74, 0x38, 0x03, 0xec, 0x70, 0x1e, 0xa3, 0xcb, 0x39, 0xc6, 0x2e, 0x67, 0x08, 0x9b,
	0x33, 0x42, 0x8f, 0x33, 0x46, 0x9f, 0x33, 0xc1, 0x80, 0x33, 0xc5, 0x1e, 0x67, 0x86, 0x7d, 0xce,
	0x02, 0xd7, 0x38, 0xa7, 0x38, 0xe0, 0x3c, 0xc1, 0x21, 0xe7, 0x0c, 0x6f, 0xa6, 0x0c, 0x15, 0x3e,
	0x9c, 0x73, 0x88, 0x8f, 0xe0, 0xf4, 0xf0, 0x1c, 0x67, 0x80, 0xeb, 0x9c, 0x31, 0xde, 0xc2, 0x99,
	0x40, 0x71, 0xe6, 0x18, 0x72, 0x16, 0x18, 0x71, 0x4e, 0xe1, 0x50, 0x46, 0x1e, 0x5c, 0x4e, 0x1f,
	0x47, 0x9c, 0x01, 0x3c, 0xce, 0x31, 0x7c, 0xce, 0x10, 0x01, 0x67, 0x8c, 0x63, 0xce, 0x14, 0x63,
	0xce, 0x0c, 0x21, 0x67, 0x8e, 0x88, 0x73, 0x86, 0x98, 0x32, 0x56, 0x48, 0x38, 0x87, 0x98, 0x70,
	0x3a, 0x78, 0x9e, 0xd3, 0x45, 0xca, 0xe9, 0x21, 0xe3, 0x0c, 0x91, 0x73, 0xc6, 0x28, 0x38, 0x13,
	0x4c, 0x39, 0x53, 0x9c, 0x70, 0x4e, 0x71, 0x83, 0x73, 0x86, 0x19, 0x65, 0x32, 0xc2, 0x29, 0xe7,
	0x31, 0xde, 0xca, 0x19, 0xe1, 0x23, 0x39, 0x53, 0xbc, 0x8d, 0x33, 0xc3, 0xdb, 0x29, 0x27, 0x0a,
	0x1f, 0x55, 0x5e, 0x31, 0xe6, 0x27, 0x01, 0x3e, 0x7a, 0x8e, 0x21, 0xc4, 0xc7, 0x08, 0x64, 0xf8,
	0x58, 0x81, 0x1c, 0x1f, 0xc7, 0xf0, 0x7c, 0x81, 0x8f, 0x67, 0x48, 0x23, 0x7c, 0x82, 0x40, 0x8c,
	0x4f, 0x14, 0x48, 0xf0, 0x49, 0x02, 0x05, 0x3e, 0x59, 0xe0, 0x04, 0x9f, 0xc2, 0x90, 0x29, 0x7c,
	0xaa, 0xc0, 0x08, 0x9f, 0x26, 0xe0, 0xe0, 0xd3, 0x05, 0x5c, 0x7c, 0x86, 0x80, 0x87, 0xcf, 0x14,
	0x08, 0xf0, 0x59, 0x02, 0x63, 0x7c, 0xb6, 0x40, 0x88, 0xcf, 0x11, 0x88, 0xf0, 0xb9, 0x02, 0x31,
	0x3e, 0x4f, 0x20, 0xc1, 0xe7, 0x0b, 0x3c, 0x8f, 0x77, 0x08, 0xa4, 0xf8, 0x02, 0x81, 0x0c, 0x5f,
	0x28, 0x90, 0xe3, 0x8b, 0x04, 0x0a, 0xbc, 0x53, 0x60, 0x8a, 0x2f, 0x16, 0x38, 0xc1, 0x97, 0x30,
	0xe4, 0x0a, 0x5f, 0x2a, 0xe0, 0xe2, 0xcb, 0x04, 0x3c, 0x7c, 0xb9, 0x80, 0x8f, 0xaf, 0x10, 0x08,
	0xf0, 0x95, 0x02, 0x63, 0x7c, 0x95, 0x40, 0x88, 0x77, 0x09, 0xc4, 0xf8, 0x6a, 0x81, 0x04, 0x5f,
	0x23, 0x90, 0xe2, 0x6b, 0x05, 0x32, 0x7c, 0x9d, 0x40, 0x8e, 0xaf, 0x17, 0x38, 0xc1, 0x37, 0x08,
	0xcc, 0xf0, 0x6e, 0x86, 0xc2, 0xc3, 0x7b, 0x04, 0xc6, 0xf8, 0x46, 0x81, 0x14, 0xdf, 0x24, 0x70,
	0x8a, 0x6f, 0x66, 0x98, 0xba, 0xf8, 0x16, 0x81, 0x00, 0xdf, 0x2a, 0x90, 0xe0, 0xdb, 0x18, 0x4e,
	0x14, 0xbe, 0x5d, 0x20, 0xc1, 0x77, 0x30, 0xdc, 0xf0, 0xf1, 0x9d, 0x0c, 0xb3, 0x00, 0xdf, 0x25,
	0x90, 0xe0, 0xbb, 0x19, 0x4e, 0x15, 0xbe, 0x47, 0xc0, 0xc7, 0xf7, 0x0a, 0x14, 0x78, 0xef, 0xdc,
	0xc6, 0x7b, 0x60, 0x2c, 0x4b, 0xb9, 0x94, 0xcb, 0xc6, 0xc5, 0xb3, 0x66, 0xe8, 0x99, 0x76, 0xb3,
	0xdb, 0xc7, 0xb9, 0xf2, 0xaa, 0xb1, 0x58, 0x71, 0xc2, 0x08, 0x73, 0x4c, 0x47, 0x6a, 0x8c, 0x79,
	0x26, 0xcf, 0xa7, 0x76, 0x20, 0xf2, 0x93, 0x08, 0x8b, 0x4c, 0xa9, 0x1a, 0x62, 0x49, 0x53, 0x8c,
	0x65, 0xa1, 0x28, 0xc0, 0x8a, 0x26, 0xea, 0x09, 0xa2, 0x69, 0x96, 0xa3, 0x44, 0x54, 0x55, 0x61,
	0x00, 0x43, 0x28, 0x2a, 0xb0, 0x26, 0x94, 0x65, 0x38, 0x2f, 0x94, 0x8f, 0x71, 0x81, 0xc9, 0x8d,
	0x3d, 0x5c, 0x64, 0xf2, 0xc7, 0x19, 0xee, 0x60, 0x0a, 0x83, 0x0c, 0x60, 0x4a, 0x26, 0x09, 0xee,
	0x64, 0x4a, 0x95, 0x8f, 0xb2, 0xa6, 0x00, 0x77, 0x31, 0x15, 0x5e, 0x80, 0xbb, 0x85, 0x7c, 0x07,
	0x2f, 0x20, 0x32, 0xd5, 0x38, 0xc2, 0x3d, 0x42, 0x31, 0xb5, 0x08, 0x53, 0x1a, 0x60, 0x9d, 0xc9,
	0x57, 0x11, 0xee, 0x15, 0x72, 0x53, 0xdc, 0xc7, 0x14, 0xa4, 0x39, 0xee, 0x67, 0x4a, 0x26, 0x39,
	0x1e, 0x60, 0x9a, 0x44, 0x31, 0x1e, 0x14, 0x4a, 0x73, 0xbc, 0x88, 0x69, 0x96, 0x86, 0x78, 0x48,
	0x53, 0x86, 0x4b, 0x44, 0x9b, 0xee, 0x94, 0x9a, 0x85, 0x28, 0xf1, 0x52, 0x6c, 0x30, 0x65, 0x69,
	0x8e, 0x47, 0x98, 0x8a, 0x49, 0x88, 0x47, 0x89, 0x6a, 0xde, 0xcc, 0xc1, 0x8b, 0x35, 0xf9, 0x78,
	0x89, 0xa6, 0x09, 0x1e, 0x63, 0x0a, 0x87, 0x0a, 0x97, 0x85, 0x66, 0x11, 0x5e, 0xca, 0x94, 0xfb,
	0x01, 0x1e, 0x27, 0xaa, 0xbb, 0xc9, 0x18, 0x4f, 0x68, 0x4a, 0xf1, 0x24, 0x53, 0xa8, 0x3c, 0xbc,
	0x8c, 0x29, 0x89, 0x3d, 0x5c, 0xd1, 0x14, 0xe1, 0xe5, 0x42, 0xb9, 0x8f, 0x57, 0x30, 0xd1, 0xdd,
	0x7a, 0x4a, 0xc8, 0x1d, 0xe3, 0x2a, 0x53, 0x71, 0x9c, 0xe2, 0x69, 0xa1, 0xb4, 0xc0, 0x2b, 0x89,
	0x1a, 0x2a, 0x1e, 0xe2, 0x19, 0x4d, 0x1e, 0x5e, 0xa5, 0x29, 0xc0, 0xab, 0x35, 0x25, 0x78, 0x8d,
	0xa6, 0x0c, 0xaf, 0xd5, 0x94, 0xe3, 0x75, 0x42, 0x79, 0x8a, 0x67, 0x99, 0xdc, 0x21, 0xf5, 0x11,
	0x51, 0x90, 0x2a, 0xbc, 0x9e, 0x29, 0x2c, 0x4e, 0xf0, 0x06, 0xa6, 0x28, 0xf6, 0xf0, 0x46, 0x4d,
	0x13, 0xbc, 0x89, 0x29, 0x1d, 0xe7, 0xa8, 0x30, 0x15, 0xb1, 0x87, 0x2a, 0x51, 0x33, 0x76, 0x32,
	0x98, 0x4c, 0xb9, 0x0a, 0xb1, 0x49, 0xb4, 0xad, 0xa2, 0x04, 0x35, 0xa1, 0xa9, 0xc2, 0x16, 0xd3,
	0x44, 0xc5, 0xa8, 0x33, 0x15, 0xe9, 0x08, 0x0d, 0xa2, 0x16, 0x3d, 0x75, 0x4d, 0xa1, 0x58, 0x61,
	0x9b, 0xc9, 0x57, 0x29, 0x5a, 0x42, 0x51, 0x8a, 0xb6, 0x50, 0x72, 0x0c, 0x8b, 0x29, 0xc8, 0x43,
	0x74, 0x34, 0x65, 0xd8, 0x61, 0x8a, 0x1d, 0x85, 0x2e, 0x53, 0x92, 0xba, 0xd8, 0x65, 0x9a, 0xb8,
	0xd4, 0x5d, 0x44, 0x74, 0x67, 0x7a, 0x44, 0x6d, 0x3a, 0x47, 0x5f, 0x28, 0xa1, 0x06, 0x63, 0xca,
	0x8f, 0xb0, 0xa7, 0xc9, 0xc3, 0xbe, 0xa6, 0x18, 0xd7, 0x98, 0xdc, 0xb1, 0x8b, 0x03, 0xa1, 0xc9,
	0x08, 0x87, 0x4c, 0x41, 0x34, 0xc4, 0x9b, 0x85, 0x62, 0xea, 0x33, 0x21, 0x6a, 0x34, 0xa6, 0xac,
	0xc0, 0x73, 0x4c, 0x49, 0xa4, 0x70, 0x9d, 0x69, 0x36, 0x0a, 0xf0, 0x16, 0x21, 0x27, 0x80, 0x22,
	0xb2, 0x94, 0x7f, 0x8c, 0xa1, 0xd0, 0x58, 0x61, 0x24, 0x14, 0x3b, 0x70, 0x34, 0x05, 0x70, 0x85,
	0xd2, 0x11, 0x8e, 0x84, 0x66, 0x0a, 0x1e, 0x93, 0xeb, 0x1c, 0xc1, 0x17, 0x8a, 0x1d, 0x04, 0x42,
	0xe9, 0x08, 0xc7, 0x9a, 0x12, 0x8c, 0x99, 0xe8, 0xe9, 0x0c, 0x99, 0x12, 0x27, 0x40, 0x24, 0x14,
	0x7b, 0x88, 0x85, 0x92, 0x18, 0x09, 0x53, 0x9a, 0x24, 0x98, 0x30, 0xe5, 0x6e, 0x80, 0xe7, 0x99,
	0x8a, 0x30, 0x47, 0xca, 0x34, 0x8b, 0x52, 0x64, 0x44, 0x1d, 0xda, 0x5f, 0x2e, 0x94, 0x0e, 0x51,
	0x30, 0x0d, 0x55, 0x8e, 0x29, 0x93, 0x7b, 0xa2, 0x70, 0xc2, 0x34, 0x76, 0x86, 0xb8, 0x21, 0xe4,
	0x0d, 0x31, 0x13, 0x4a, 0x12, 0x9c, 0x32, 0x65, 0x7e, 0x81, 0xb7, 0x12, 0xed, 0x78, 0x8a, 0xfa,
	0x90, 0x28, 0x1c, 0x8d, 0xf1, 0x36, 0xa6, 0x74, 0xec, 0xe3, 0xed, 0x42, 0x33, 0x6a, 0xc5, 0x92,
	0xb1, 0xb8, 0x93, 0x79, 0x2e, 0xf5, 0x22, 0x63, 0xa4, 0xa8, 0x19, 0x4b, 0xc6, 0x62, 0x57, 0x85,
	0x11, 0x75, 0x23, 0x63, 0x31, 0xa2, 0x76, 0x24, 0x74, 0xd3, 0x88, 0xfa, 0x91, 0xd0, 0x57, 0x1e,
	0x35, 0x24, 0x63, 0x18, 0x50, 0x47, 0x0a, 0x4e, 0xa8, 0x25, 0x05, 0xa7, 0xd4, 0x93, 0x8c, 0xf1,
	0x0d, 0x6a, 0x4a, 0xc2, 0x30, 0x75, 0xa8, 0x2b, 0x09, 0x83, 0xe7, 0x1d, 0x6a, 0x4b, 0xc2, 0x34,
	0x0f, 0xa8, 0x2f, 0x4b, 0xc6, 0xe2, 0xae, 0x52, 0x8a, 0x1a, 0x93, 0x71, 0x78, 0x83, 0x3a, 0xb3,
	0x64, 0x2c, 0xda, 0xc7, 0xb1, 0x47, 0xad, 0x49, 0x98, 0xf8, 0x1e, 0xf5, 0x26, 0x63, 0x9a, 0x50,
	0x73, 0x12, 0x16, 0x71, 0x4a, 0xdd, 0x59, 0x32, 0x16, 0x7b, 0x2a, 0x4a, 0xa9, 0x3d, 0x19, 0x53,
	0x45, 0xfd, 0x29, 0x38, 0xa4, 0x06, 0x65, 0x2c, 0xb8, 0x43, 0x09, 0xbd, 0xf8, 0x84, 0x5a, 0x94,
	0xd0, 0x57, 0x27, 0xd4, 0xa3, 0x8c, 0xa9, 0x43, 0x4d, 0xca, 0x58, 0x04, 0xd4, 0xa5, 0x84, 0x81,
	0xe3, 0x50, 0x9b, 0x32, 0xc6, 0x0e, 0xf5, 0xa9, 0xa0, 0x4f, 0x8d, 0x4a, 0x98, 0x78, 0x0e, 0x75,
	0xaa, 0x60, 0x42, 0xad, 0xca, 0x98, 0x2a, 0xea, 0x55, 0xc6, 0x59, 0x42, 0xcd, 0x4a, 0x58, 0xc4,
	0x0e, 0x75, 0x2b, 0xe1, 0x2c, 0x4c, 0xa8, 0x5d, 0x19, 0xd3, 0x11, 0xf5, 0xab, 0xa0, 0x4b, 0x0d,
	0x2b, 0x78, 0x4c, 0x1d, 0x2b, 0x18, 0x53, 0xcb, 0x96, 0x8c, 0xc5, 0xbe, 0xf2, 0x86, 0xd4, 0xb3,
	0x8c, 0xe3, 0x94, 0x9a, 0x96, 0x31, 0x74, 0xa9, 0x6b, 0x05, 0x0b, 0x6a, 0x5b, 0xc6, 0x28, 0xa4,
	0xbe, 0x65, 0x8c, 0x3d, 0x6a, 0x5c, 0xc6, 0x69, 0x4e, 0x9d, 0x4b, 0xe8, 0x86, 0x05, 0xb5, 0x2e,
	0x63, 0xec, 0x51, 0xef, 0x12, 0x1e, 0xc5, 0x1e, 0x35, 0x2f, 0xa1, 0x17, 0x7a, 0xd4, 0xbd, 0x84,
	0xbe, 0x52, 0xd4, 0xbe, 0x82, 0xdc, 0xbf, 0x84, 0xc1, 0x30, 0xa7, 0x06, 0x66, 0x4c, 0x7d, 0xea,
	0xe0, 0x92, 0xb1, 0x38, 0xf0, 0x54, 0x4a, 0x2d, 0x5c, 0x32, 0x16, 0xf7, 0x54, 0x10, 0xe0, 0xbd,
	0x82, 0x41, 0x36, 0xc1, 0xf7, 0x31, 0xee, 0xd3, 0x1d, 0xfa, 0x7e, 0xc1, 0x91, 0x9f, 0xe0, 0x07,
	0x04, 0x93, 0xd0, 0xc5, 0x0f, 0x32, 0x5e, 0x9b, 0xb8, 0x09, 0x7e, 0x48, 0x30, 0x2b, 0x6e, 0xe0,
	0x87, 0x19, 0x0f, 0x82, 0x20, 0xc0, 0x8f, 0x30, 0x1e, 0xd2, 0xbf, 0xd6, 0x3f, 0x2a, 0x48, 0xf7,
	0xe2, 0xc7, 0x04, 0xa3, 0xdc, 0xc7, 0x8f, 0x0b, 0x66, 0x33, 0x17, 0x3f, 0x71, 0x86, 0x11, 0x7e,
	0x52, 0xf0, 0xc6, 0x8d, 0x1b, 0xf8, 0x29, 0xc1, 0xd9, 0x6c, 0x86, 0x9f, 0x16, 0x3c, 0x3d, 0x3d,
	0xc5, 0xfb, 0xe6, 0x36, 0xde, 0x51, 0x36, 0x56, 0xcf, 0x2c, 0xb3, 0x7c, 0xc5, 0x58, 0x19, 0x89,
	0x68, 0x6a, 0xc5, 0xfd, 0xdf, 0x25, 0xf4, 0x6c, 0x11, 0xf9, 0x78, 0x96, 0xab, 0xfc, 0xe6, 0x0f,
	0x58, 0x7c, 0x40, 0xe6, 0x3f, 0x0a, 0xf2, 0x99, 0xfe, 0xe5, 0x8a, 0x99, 0xc7, 0x12, 0xc7, 0xd5,
	0xbf, 0x54, 0x31, 0x93, 0x7a, 0x87, 0x2a, 0x0f, 0xf2, 0xc2, 0x71, 0xd7, 0x97, 0x2e, 0xcd, 0x5d,
	0xbe, 0xd3, 0xbe, 0x79, 0x5c, 0x7e, 0xc0, 0x28, 0x85, 0x49, 0xec, 0xc9, 0xe4, 0x32, 0x4f, 0xde,
	0x1a, 0xd8, 0xf8, 0x00, 0x8c, 0x15, 0xbd, 0x99, 0xf2, 0x5d, 0xc6, 0x1d, 0x37, 0x7f, 0xc8, 0xd8,
	0x19, 0x74, 0xfa, 0xf6, 0x81, 0xb8, 0x6f, 0x65, 0x4b, 0xdc, 0xb7, 0x72, 0x4d, 0xdc, 0xb7, 0xd2,
	0x16, 0xf7, 0xdd, 0x3c, 0x14, 0xf7, 0xad, 0xf4, 0xc4, 0x7d, 0x2b, 0x9b, 0xe2, 0xbe, 0x95, 0x1d,
	0x71, 0xdf, 0x4a, 0x53, 0xdc, 0xb7, 0xb2, 0x2b, 0xee, 0x5b, 0xa9, 0x8b, 0xfb, 0x56, 0x6c, 0x71,
	0xdf, 0x8a, 0x25, 0xee, 0x5b, 0xd9, 0x17, 0xf7, 0xad, 0x0c, 0xc4, 0x7d, 0x2b, 0x7d, 0x71, 0xdf,
	0xca, 0xa1, 0xb8, 0x6f, 0xb5, 0x27, 0xee, 0x5b, 0x6d, 0x88, 0xfb, 0x56, 0x37, 0xc5, 0x7d, 0xab,
	0x55, 0x71, 0xdf, 0xea, 0x81, 0xb8, 0x6f, 0xb5, 0x26, 0xee, 0x5b, 0x3d, 0x14, 0xf7, 0xad, 0x6e,
	0x8b, 0xfb, 0x56, 0x2d, 0x71, 0xdf, 0x6a, 0x5f, 0xdc, 0xb7, 0xba, 0x23, 0xee, 0x5b, 0xdd, 0x15,
	0xf7, 0xad, 0x56, 0xc4, 0x7d, 0xab, 0xfb, 0xe2, 0xbe, 0xd5, 0x3d, 0x71, 0xdf, 0xaa, 0x2d, 0xee,
	0xdb, 0xdc, 0x11, 0xf7, 0xad, 0x76, 0xc4, 0x7d, 0xab, 0x75, 0x71, 0xdf, 0xea, 0x96, 0xb8, 0x6f,
	0xb5, 0x29, 0xee, 0xdb, 0x6a, 0x88, 0xfb, 0x9a, 0x96, 0xb8, 0xaf, 0x59, 0x11, 0xf7, 0x35, 0xf7,
	0xc4, 0x7d, 0x5b, 0x07, 0xe2, 0xbe, 0xe6, 0x96, 0xb8, 0x6f, 0x7f, 0x53, 0xdc, 0xd7, 0x6c, 0x8b,
	0xfb, 0x9a, 0x1d, 0x71, 0x5f, 0xf3, 0x9a, 0xb8, 0xaf, 0x69, 0x8a, 0xfb, 0x9a, 0x3b, 0xe2, 0xbe,
	0x2d, 0x4b, 0xdc, 0xd7, 0xac, 0x8b, 0xfb, 0x9a, 0x9b, 0xe2, 0xbe, 0x66, 0x4b, 0xdc, 0xd7, 0xb4,
	0xc5, 0x7d, 0xcd, 0xa6, 0xb8, 0x6f, 0xc3, 0x16, 0xf7, 0x35, 0x07, 0xe2, 0xbe, 0xe6, 0xbe, 0xb8,
	0xaf, 0x79, 0x20, 0xee, 0x6b, 0x1e, 0x8a, 0xfb, 0x6e, 0xb6, 0xc4, 0x7d, 0x37, 0xb7, 0xc5, 0x7d,
	0x37, 0x2d, 0x71, 0xdf, 0xcd, 0x1d, 0x71, 0xdf, 0x9a, 0x29, 0xee, 0x5b, 0xab, 0x8b, 0xfb, 0xf6,
	0xf6, 0xc4, 0x7d, 0xeb, 0xbb, 0xe2, 0xbe, 0x35, 0x5b, 0xdc, 0xb7, 0x56, 0x13, 0xf7, 0xad, 0xf5,
	0xc5, 0x7d, 0xb7, 0x5a, 0xe2, 0xbe, 0x5b, 0x3b, 0xe2, 0xbe, 0x5b, 0xdb, 0xe2, 0xbe, 0x5b, 0x4d,
	0x71, 0xdf, 0x2d, 0x5b, 0xdc, 0xb7, 0xbe, 0x25, 0xee, 0xdb, 0xdd, 0x12, 0xf7, 0xed, 0x6f, 0x89,
	0xfb, 0xd6, 0x2b, 0xe2, 0xbe, 0x75, 0x4b, 0xdc, 0xb7, 0x5e, 0x13, 0xf7, 0xdd, 0xac, 0x89, 0xfb,
	0xd6, 0x1b, 0xe2, 0xbe, 0xf5, 0xa6, 0xb8, 0x6f, 0xdd, 0x16, 0xf7, 0xad, 0xb7, 0xc5, 0x7d, 0xeb,
	0x9b, 0xe2, 0xbe, 0xf5, 0xae, 0xb8, 0x6f, 0x7d, 0x20, 0xee, 0x5b, 0xef, 0x8b, 0xfb, 0xd6, 0xeb,
	0xe2, 0xbe, 0xf5, 0x8e, 0xb8, 0x6f, 0x7d, 0x5f, 0xdc, 0xb7, 0x7e, 0x20, 0xee, 0xdb, 0xe8, 0x8b,
	0xfb, 0x36, 0x2c, 0x71, 0xdf, 0xbd, 0x8a, 0xb8, 0x6f, 0xa3, 0x23, 0xee, 0xdb, 0x68, 0x89, 0xfb,
	0x36, 0x06, 0xe2, 0xbe, 0xcd, 0x9e, 0xb8, 0x6f, 0xb3, 0x23, 0xee, 0xdb, 0xdc, 0x14, 0xf7, 0x6d,
	0xda, 0xe2, 0xbe, 0xcd, 0x5d, 0x71, 0xdf, 0x66, 0x4d, 0xdc, 0xb7, 0x69, 0x89, 0xfb, 0x36, 0xdb,
	0xe2, 0xbe, 0xcd, 0xbe, 0xb8, 0xef, 0xb6, 0x25, 0xee, 0xbb, 0xdd, 0x15, 0xf7, 0xdd, 0xae, 0x89,
	0xfb, 0x6e, 0xef, 0x88, 0xfb, 0xb6, 0x0e, 0xc5, 0x7d, 0x5b, 0x35, 0x71, 0xdf, 0x56, 0x53, 0xdc,
	0xb7, 0xd5, 0x15, 0xf7, 0x6d, 0xd9, 0xe2, 0xbe, 0xad, 0x7d, 0x71, 0xdf, 0x56, 0x5d, 0xdc, 0xb7,
	0x5d, 0x11, 0xf7, 0x6d, 0xef, 0x89, 0xfb, 0xb6, 0xab, 0xe2, 0xbe, 0xed, 0x9e, 0xb8, 0x6f, 0xdb,
	0x16, 0xf7, 0x6d, 0x1f, 0x88, 0xfb, 0xb6, 0x9b, 0xda, 0x7d, 0xdb, 0x7d, 0xed, 0xbe, 0xed, 0x81,
	0x76, 0x5f, 0x6b, 0x47, 0xbb, 0xaf, 0xd5, 0xd2, 0xee, 0x6b, 0xd5, 0xb5, 0xfb, 0x5a, 0xfb, 0xda,
	0x7d, 0xad, 0x03, 0xed, 0xbe, 0xd6, 0x9e, 0x76, 0x5f, 0xab, 0xad, 0xdd, 0xd7, 0xea, 0x6b, 0xf7,
	0xb5, 0x1a, 0xda, 0x7d, 0xad, 0x5d, 0xed, 0xbe, 0x96, 0xad, 0xdd, 0xd7, 0x1a, 0x68, 0xf7, 0x3d,
	0xe8, 0x6b, 0xf7, 0xb5, 0xae, 0x69, 0xf7, 0xdd, 0xb2, 0xb4, 0xfb, 0x5a, 0x9b, 0xda, 0x7d, 0x2d,
	0x53, 0xbb, 0xaf, 0xd5, 0xd1, 0xee, 0x6b, 0xd5, 0xb4, 0xfb, 0x5a, 0x3d, 0xed, 0xbe, 0x56, 0x45,
	0xbb, 0xaf, 0x75, 0xa8, 0xdd, 0xd7, 0xb2, 0xb4, 0xfb, 0x76, 0x2a, 0xda, 0x7d, 0x3b, 0xb6, 0x76,
	0xdf, 0x4e, 0x57, 0xbb, 0x6f, 0xa7, 0xad, 0xdd, 0xb7, 0x63, 0x6a, 0xf7, 0xed, 0x1c, 0x6a, 0xf7,
	0xed, 0x34, 0xb5, 0xfb, 0x76, 0x6a, 0xda, 0x7d, 0x3b, 0x75, 0xed, 0xbe, 0x9d, 0x81, 0x76, 0xdf,
	0xce, 0x96, 0x76, 0x5f, 0xab, 0xab, 0xdd, 0xb7, 0xb3, 0xa3, 0xdd, 0x77, 0xc7, 0xd2, 0xee, 0xdb,
	0x6d, 0x69, 0xf7, 0xed, 0xee, 0x6b, 0xf7, 0xed, 0xf6, 0xb4, 0xfb, 0x76, 0x2b, 0xda, 0x7d, 0xbb,
	0x75, 0xed, 0xbe, 0xdd, 0x03, 0xed, 0xbe, 0xdd, 0x9a, 0x76, 0xdf, 0x6e, 0x43, 0xbb, 0x6f, 0xb7,
	0xa3, 0xdd, 0xb7, 0xdb, 0xd6, 0xee, 0xdb, 0xed, 0x6b, 0xf7, 0xed, 0xda, 0xda, 0x7d, 0x77, 0x2b,
	0xda, 0x7d, 0xed, 0x9a, 0x76, 0x5f, 0x7b, 0x47, 0xbb, 0xaf, 0x3d, 0xd0, 0xee, 0x6b, 0xef, 0x53,
	0xe7, 0xae, 0x18, 0xf3, 0xd5, 0x36, 0x35, 0xee, 0x8a, 0x31, 0xdf, 0x6b, 0x50, 0xdf, 0xae, 0x18,
	0xf3, 0xad, 0x0e, 0xb5, 0x2d, 0x3d, 0x09, 0x26, 0x75, 0x2d, 0x7d, 0xaf, 0x2d, 0x6a, 0x5a, 0x3a,
	0x85, 0x45, 0x3d, 0xbb, 0x62, 0xcc, 0xef, 0x99, 0xd4, 0xb2, 0x2b, 0xc6, 0xfc, 0x7e, 0x8f, 0x3a,
	0x96, 0x3e, 0x6e, 0x51, 0xc3, 0x12, 0xf4, 0xa9, 0x5f, 0x09, 0x2a, 0xd4, 0xae, 0x04, 0x1d, 0xea,
	0x56, 0x3a, 0x69, 0x8f, 0x9a, 0x95, 0x46, 0x4c, 0xea, 0x55, 0x82, 0x36, 0xde, 0x27, 0x50, 0xc7,
	0xcf, 0x08, 0x5c, 0xc3, 0xcf, 0x0a, 0xb4, 0xf0, 0x73, 0x02, 0x4d, 0xfc, 0xbc, 0x40, 0x15, 0xbf,
	0x20, 0xb0, 0x83, 0x5f, 0x64, 0x38, 0xac, 0xe0, 0x97, 0x18, 0xea, 0x3d, 0xfc, 0xb2, 0x4c, 0xf5,
	0xf0, 0x2b, 0x0c, 0xb5, 0x1e, 0x7e, 0x55, 0xbe, 0x45, 0x0b, 0xbf, 0x26, 0x53, 0x9b, 0xf8, 0x75,
	0x01, 0x1b, 0xbf, 0x21, 0xb0, 0x8d, 0xdf, 0x14, 0x38, 0xc4, 0xfb, 0x05, 0x6a, 0xf8, 0x2d, 0x06,
	0xb3, 0x81, 0xdf, 0x96, 0x91, 0x03, 0xfc, 0x0e, 0x43, 0x7f, 0x1f, 0xbf, 0x2b, 0xb0, 0x8d, 0xdf,
	0x13, 0x38, 0xc4, 0xef, 0x0b, 0x34, 0xf0, 0x07, 0x02, 0x6d, 0xfc, 0xa1, 0x40, 0x1d, 0x7f, 0x24,
	0xd0, 0xc2, 0x07, 0x04, 0x76, 0xf0, 0x41, 0x81, 0x3e, 0xfe, 0x58, 0xa0, 0x83, 0x3f, 0x11, 0xb0,
	0xf1, 0xa7, 0x02, 0x16, 0xfe, 0x4c, 0xc0, 0xc4, 0x9f, 0x0b, 0xec, 0xe1, 0x2f, 0x18, 0x06, 0x75,
	0xfc, 0xa5, 0x40, 0x05, 0x7f, 0xc5, 0x50, 0xa9, 0xe1, 0xaf, 0xe5, 0xbb, 0x57, 0xf1, 0x37, 0x32,
	0xd5, 0xc3, 0xdf, 0x0a, 0x58, 0xf8, 0x3b, 0x81, 0x03, 0xfc, 0xbd, 0xc0, 0x21, 0xfe, 0x41, 0x6e,
	0xdc, 0x00, 0xff, 0x28, 0x50, 0xc3, 0x3f, 0x09, 0x74, 0xf0, 0xcf, 0x02, 0x75, 0xfc, 0x8b, 0x40,
	0x13, 0xff, 0x2a, 0x37, 0x77, 0x0b, 0xff, 0x26, 0x17, 0xb3, 0x81, 0x7f, 0x97, 0xf7, 0xb4, 0x86,
	0xff, 0x90, 0x2b, 0x6f, 0xe1, 0x3f, 0x05, 0xf6, 0xf1, 0x5f, 0x73, 0xc3, 0x65, 0xfe, 0x3f, 0xd8,
	0xa7, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x96, 0xb0, 0xe9, 0x95, 0x92, 0x1d, 0x00, 0x00,
}
