/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb.Audio', null, global);
goog.exportSymbol('proto.pb.Channel', null, global);
goog.exportSymbol('proto.pb.Claim', null, global);
goog.exportSymbol('proto.pb.Fee', null, global);
goog.exportSymbol('proto.pb.Fee.Currency', null, global);
goog.exportSymbol('proto.pb.File', null, global);
goog.exportSymbol('proto.pb.Image', null, global);
goog.exportSymbol('proto.pb.Language', null, global);
goog.exportSymbol('proto.pb.Language.Language', null, global);
goog.exportSymbol('proto.pb.Language.Script', null, global);
goog.exportSymbol('proto.pb.Location', null, global);
goog.exportSymbol('proto.pb.Location.Country', null, global);
goog.exportSymbol('proto.pb.Stream', null, global);
goog.exportSymbol('proto.pb.Video', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Claim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.Claim.oneofGroups_);
};
goog.inherits(proto.pb.Claim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Claim.displayName = 'proto.pb.Claim';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.Claim.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pb.Claim.TypeCase = {
  TYPE_NOT_SET: 0,
  STREAM: 1,
  CHANNEL: 2
};

/**
 * @return {proto.pb.Claim.TypeCase}
 */
proto.pb.Claim.prototype.getTypeCase = function() {
  return /** @type {proto.pb.Claim.TypeCase} */(jspb.Message.computeOneofCase(this, proto.pb.Claim.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Claim.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Claim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Claim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Claim.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && proto.pb.Stream.toObject(includeInstance, f),
    channel: (f = msg.getChannel()) && proto.pb.Channel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Claim}
 */
proto.pb.Claim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Claim;
  return proto.pb.Claim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Claim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Claim}
 */
proto.pb.Claim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Stream;
      reader.readMessage(value,proto.pb.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 2:
      var value = new proto.pb.Channel;
      reader.readMessage(value,proto.pb.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Claim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Claim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Claim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Claim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Stream.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * optional Stream stream = 1;
 * @return {?proto.pb.Stream}
 */
proto.pb.Claim.prototype.getStream = function() {
  return /** @type{?proto.pb.Stream} */ (
    jspb.Message.getWrapperField(this, proto.pb.Stream, 1));
};


/** @param {?proto.pb.Stream|undefined} value */
proto.pb.Claim.prototype.setStream = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pb.Claim.oneofGroups_[0], value);
};


proto.pb.Claim.prototype.clearStream = function() {
  this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Claim.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Channel channel = 2;
 * @return {?proto.pb.Channel}
 */
proto.pb.Claim.prototype.getChannel = function() {
  return /** @type{?proto.pb.Channel} */ (
    jspb.Message.getWrapperField(this, proto.pb.Channel, 2));
};


/** @param {?proto.pb.Channel|undefined} value */
proto.pb.Claim.prototype.setChannel = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pb.Claim.oneofGroups_[0], value);
};


proto.pb.Claim.prototype.clearChannel = function() {
  this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Claim.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Channel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Channel.repeatedFields_, null);
};
goog.inherits(proto.pb.Channel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Channel.displayName = 'proto.pb.Channel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Channel.repeatedFields_ = [5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Channel.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Channel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Channel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Channel.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    thumbnailUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tagsList: jspb.Message.getRepeatedField(msg, 5),
    languagesList: jspb.Message.toObjectList(msg.getLanguagesList(),
    proto.pb.Language.toObject, includeInstance),
    locationsList: jspb.Message.toObjectList(msg.getLocationsList(),
    proto.pb.Location.toObject, includeInstance),
    contactEmail: jspb.Message.getFieldWithDefault(msg, 8, ""),
    homepageUrl: jspb.Message.getFieldWithDefault(msg, 9, ""),
    coverUrl: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Channel}
 */
proto.pb.Channel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Channel;
  return proto.pb.Channel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Channel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Channel}
 */
proto.pb.Channel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnailUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 6:
      var value = new proto.pb.Language;
      reader.readMessage(value,proto.pb.Language.deserializeBinaryFromReader);
      msg.addLanguages(value);
      break;
    case 7:
      var value = new proto.pb.Location;
      reader.readMessage(value,proto.pb.Location.deserializeBinaryFromReader);
      msg.addLocations(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactEmail(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setHomepageUrl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoverUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Channel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Channel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Channel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Channel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getThumbnailUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getLanguagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.pb.Language.serializeBinaryToWriter
    );
  }
  f = message.getLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.pb.Location.serializeBinaryToWriter
    );
  }
  f = message.getContactEmail();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getHomepageUrl();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCoverUrl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pb.Channel.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.pb.Channel.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.pb.Channel.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.Channel.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.pb.Channel.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.Channel.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.pb.Channel.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.Channel.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string thumbnail_url = 4;
 * @return {string}
 */
proto.pb.Channel.prototype.getThumbnailUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pb.Channel.prototype.setThumbnailUrl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string tags = 5;
 * @return {!Array.<string>}
 */
proto.pb.Channel.prototype.getTagsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<string>} value */
proto.pb.Channel.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.pb.Channel.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.pb.Channel.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * repeated Language languages = 6;
 * @return {!Array.<!proto.pb.Language>}
 */
proto.pb.Channel.prototype.getLanguagesList = function() {
  return /** @type{!Array.<!proto.pb.Language>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Language, 6));
};


/** @param {!Array.<!proto.pb.Language>} value */
proto.pb.Channel.prototype.setLanguagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.pb.Language=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Language}
 */
proto.pb.Channel.prototype.addLanguages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.pb.Language, opt_index);
};


proto.pb.Channel.prototype.clearLanguagesList = function() {
  this.setLanguagesList([]);
};


/**
 * repeated Location locations = 7;
 * @return {!Array.<!proto.pb.Location>}
 */
proto.pb.Channel.prototype.getLocationsList = function() {
  return /** @type{!Array.<!proto.pb.Location>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Location, 7));
};


/** @param {!Array.<!proto.pb.Location>} value */
proto.pb.Channel.prototype.setLocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.pb.Location=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Location}
 */
proto.pb.Channel.prototype.addLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.pb.Location, opt_index);
};


proto.pb.Channel.prototype.clearLocationsList = function() {
  this.setLocationsList([]);
};


/**
 * optional string contact_email = 8;
 * @return {string}
 */
proto.pb.Channel.prototype.getContactEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.pb.Channel.prototype.setContactEmail = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string homepage_url = 9;
 * @return {string}
 */
proto.pb.Channel.prototype.getHomepageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.pb.Channel.prototype.setHomepageUrl = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string cover_url = 10;
 * @return {string}
 */
proto.pb.Channel.prototype.getCoverUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.pb.Channel.prototype.setCoverUrl = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Stream.repeatedFields_, proto.pb.Stream.oneofGroups_);
};
goog.inherits(proto.pb.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Stream.displayName = 'proto.pb.Stream';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Stream.repeatedFields_ = [5,6,7];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.Stream.oneofGroups_ = [[16,17,18]];

/**
 * @enum {number}
 */
proto.pb.Stream.TypeCase = {
  TYPE_NOT_SET: 0,
  IMAGE: 16,
  VIDEO: 17,
  AUDIO: 18
};

/**
 * @return {proto.pb.Stream.TypeCase}
 */
proto.pb.Stream.prototype.getTypeCase = function() {
  return /** @type {proto.pb.Stream.TypeCase} */(jspb.Message.computeOneofCase(this, proto.pb.Stream.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdHash: msg.getSdHash_asB64(),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    thumbnailUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tagsList: jspb.Message.getRepeatedField(msg, 5),
    languagesList: jspb.Message.toObjectList(msg.getLanguagesList(),
    proto.pb.Language.toObject, includeInstance),
    locationsList: jspb.Message.toObjectList(msg.getLocationsList(),
    proto.pb.Location.toObject, includeInstance),
    author: jspb.Message.getFieldWithDefault(msg, 8, ""),
    license: jspb.Message.getFieldWithDefault(msg, 9, ""),
    licenseUrl: jspb.Message.getFieldWithDefault(msg, 10, ""),
    releaseTime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    mediaType: jspb.Message.getFieldWithDefault(msg, 13, ""),
    file: (f = msg.getFile()) && proto.pb.File.toObject(includeInstance, f),
    fee: (f = msg.getFee()) && proto.pb.Fee.toObject(includeInstance, f),
    image: (f = msg.getImage()) && proto.pb.Image.toObject(includeInstance, f),
    video: (f = msg.getVideo()) && proto.pb.Video.toObject(includeInstance, f),
    audio: (f = msg.getAudio()) && proto.pb.Audio.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Stream}
 */
proto.pb.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Stream;
  return proto.pb.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Stream}
 */
proto.pb.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSdHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnailUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 6:
      var value = new proto.pb.Language;
      reader.readMessage(value,proto.pb.Language.deserializeBinaryFromReader);
      msg.addLanguages(value);
      break;
    case 7:
      var value = new proto.pb.Location;
      reader.readMessage(value,proto.pb.Location.deserializeBinaryFromReader);
      msg.addLocations(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthor(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicense(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicenseUrl(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReleaseTime(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMediaType(value);
      break;
    case 14:
      var value = new proto.pb.File;
      reader.readMessage(value,proto.pb.File.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 15:
      var value = new proto.pb.Fee;
      reader.readMessage(value,proto.pb.Fee.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 16:
      var value = new proto.pb.Image;
      reader.readMessage(value,proto.pb.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 17:
      var value = new proto.pb.Video;
      reader.readMessage(value,proto.pb.Video.deserializeBinaryFromReader);
      msg.setVideo(value);
      break;
    case 18:
      var value = new proto.pb.Audio;
      reader.readMessage(value,proto.pb.Audio.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getThumbnailUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getLanguagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.pb.Language.serializeBinaryToWriter
    );
  }
  f = message.getLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.pb.Location.serializeBinaryToWriter
    );
  }
  f = message.getAuthor();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLicense();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getLicenseUrl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getReleaseTime();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getMediaType();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.pb.File.serializeBinaryToWriter
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.pb.Fee.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.pb.Image.serializeBinaryToWriter
    );
  }
  f = message.getVideo();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.pb.Video.serializeBinaryToWriter
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.pb.Audio.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes sd_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pb.Stream.prototype.getSdHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sd_hash = 1;
 * This is a type-conversion wrapper around `getSdHash()`
 * @return {string}
 */
proto.pb.Stream.prototype.getSdHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSdHash()));
};


/**
 * optional bytes sd_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSdHash()`
 * @return {!Uint8Array}
 */
proto.pb.Stream.prototype.getSdHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSdHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.Stream.prototype.setSdHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.pb.Stream.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.Stream.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.pb.Stream.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.Stream.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string thumbnail_url = 4;
 * @return {string}
 */
proto.pb.Stream.prototype.getThumbnailUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pb.Stream.prototype.setThumbnailUrl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string tags = 5;
 * @return {!Array.<string>}
 */
proto.pb.Stream.prototype.getTagsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<string>} value */
proto.pb.Stream.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.pb.Stream.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.pb.Stream.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * repeated Language languages = 6;
 * @return {!Array.<!proto.pb.Language>}
 */
proto.pb.Stream.prototype.getLanguagesList = function() {
  return /** @type{!Array.<!proto.pb.Language>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Language, 6));
};


/** @param {!Array.<!proto.pb.Language>} value */
proto.pb.Stream.prototype.setLanguagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.pb.Language=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Language}
 */
proto.pb.Stream.prototype.addLanguages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.pb.Language, opt_index);
};


proto.pb.Stream.prototype.clearLanguagesList = function() {
  this.setLanguagesList([]);
};


/**
 * repeated Location locations = 7;
 * @return {!Array.<!proto.pb.Location>}
 */
proto.pb.Stream.prototype.getLocationsList = function() {
  return /** @type{!Array.<!proto.pb.Location>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Location, 7));
};


/** @param {!Array.<!proto.pb.Location>} value */
proto.pb.Stream.prototype.setLocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.pb.Location=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Location}
 */
proto.pb.Stream.prototype.addLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.pb.Location, opt_index);
};


proto.pb.Stream.prototype.clearLocationsList = function() {
  this.setLocationsList([]);
};


/**
 * optional string author = 8;
 * @return {string}
 */
proto.pb.Stream.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.pb.Stream.prototype.setAuthor = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string license = 9;
 * @return {string}
 */
proto.pb.Stream.prototype.getLicense = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.pb.Stream.prototype.setLicense = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string license_url = 10;
 * @return {string}
 */
proto.pb.Stream.prototype.getLicenseUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.pb.Stream.prototype.setLicenseUrl = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 release_time = 11;
 * @return {number}
 */
proto.pb.Stream.prototype.getReleaseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.pb.Stream.prototype.setReleaseTime = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string media_type = 13;
 * @return {string}
 */
proto.pb.Stream.prototype.getMediaType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.pb.Stream.prototype.setMediaType = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional File file = 14;
 * @return {?proto.pb.File}
 */
proto.pb.Stream.prototype.getFile = function() {
  return /** @type{?proto.pb.File} */ (
    jspb.Message.getWrapperField(this, proto.pb.File, 14));
};


/** @param {?proto.pb.File|undefined} value */
proto.pb.Stream.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.pb.Stream.prototype.clearFile = function() {
  this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Stream.prototype.hasFile = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Fee fee = 15;
 * @return {?proto.pb.Fee}
 */
proto.pb.Stream.prototype.getFee = function() {
  return /** @type{?proto.pb.Fee} */ (
    jspb.Message.getWrapperField(this, proto.pb.Fee, 15));
};


/** @param {?proto.pb.Fee|undefined} value */
proto.pb.Stream.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.pb.Stream.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Stream.prototype.hasFee = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Image image = 16;
 * @return {?proto.pb.Image}
 */
proto.pb.Stream.prototype.getImage = function() {
  return /** @type{?proto.pb.Image} */ (
    jspb.Message.getWrapperField(this, proto.pb.Image, 16));
};


/** @param {?proto.pb.Image|undefined} value */
proto.pb.Stream.prototype.setImage = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.pb.Stream.oneofGroups_[0], value);
};


proto.pb.Stream.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Stream.prototype.hasImage = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Video video = 17;
 * @return {?proto.pb.Video}
 */
proto.pb.Stream.prototype.getVideo = function() {
  return /** @type{?proto.pb.Video} */ (
    jspb.Message.getWrapperField(this, proto.pb.Video, 17));
};


/** @param {?proto.pb.Video|undefined} value */
proto.pb.Stream.prototype.setVideo = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.pb.Stream.oneofGroups_[0], value);
};


proto.pb.Stream.prototype.clearVideo = function() {
  this.setVideo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Stream.prototype.hasVideo = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Audio audio = 18;
 * @return {?proto.pb.Audio}
 */
proto.pb.Stream.prototype.getAudio = function() {
  return /** @type{?proto.pb.Audio} */ (
    jspb.Message.getWrapperField(this, proto.pb.Audio, 18));
};


/** @param {?proto.pb.Audio|undefined} value */
proto.pb.Stream.prototype.setAudio = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.pb.Stream.oneofGroups_[0], value);
};


proto.pb.Stream.prototype.clearAudio = function() {
  this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Stream.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 18) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Fee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Fee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Fee.displayName = 'proto.pb.Fee';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Fee.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Fee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Fee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Fee.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: msg.getAddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Fee}
 */
proto.pb.Fee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Fee;
  return proto.pb.Fee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Fee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Fee}
 */
proto.pb.Fee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.Fee.Currency} */ (reader.readEnum());
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Fee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Fee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Fee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Fee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.Fee.Currency = {
  UNKNOWN_CURRENCY: 0,
  LBC: 1,
  BTC: 2,
  USD: 3
};

/**
 * optional Currency currency = 1;
 * @return {!proto.pb.Fee.Currency}
 */
proto.pb.Fee.prototype.getCurrency = function() {
  return /** @type {!proto.pb.Fee.Currency} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.pb.Fee.Currency} value */
proto.pb.Fee.prototype.setCurrency = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pb.Fee.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes address = 2;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.pb.Fee.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.pb.Fee.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.Fee.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.pb.Fee.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.Fee.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.File = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.File, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.File.displayName = 'proto.pb.File';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.File.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.File.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.File} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.File.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.File}
 */
proto.pb.File.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.File;
  return proto.pb.File.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.File} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.File}
 */
proto.pb.File.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.File.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.File.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.File} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.File.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pb.File.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes hash = 3;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.pb.File.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.pb.File.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.File.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pb.File.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pb.File.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 size = 2;
 * @return {number}
 */
proto.pb.File.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.File.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Image.displayName = 'proto.pb.Image';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Image}
 */
proto.pb.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Image;
  return proto.pb.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Image}
 */
proto.pb.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 width = 1;
 * @return {number}
 */
proto.pb.Image.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.Image.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.pb.Image.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.Image.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Video = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Video, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Video.displayName = 'proto.pb.Video';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Video.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Video.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Video} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Video.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Video}
 */
proto.pb.Video.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Video;
  return proto.pb.Video.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Video} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Video}
 */
proto.pb.Video.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Video.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Video.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Video} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Video.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 width = 1;
 * @return {number}
 */
proto.pb.Video.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.Video.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.pb.Video.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.Video.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 duration = 3;
 * @return {number}
 */
proto.pb.Video.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.Video.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Audio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Audio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Audio.displayName = 'proto.pb.Audio';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Audio.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Audio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Audio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Audio.toObject = function(includeInstance, msg) {
  var f, obj = {
    duration: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Audio}
 */
proto.pb.Audio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Audio;
  return proto.pb.Audio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Audio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Audio}
 */
proto.pb.Audio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Audio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Audio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Audio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Audio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 duration = 1;
 * @return {number}
 */
proto.pb.Audio.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.Audio.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Language = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Language, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Language.displayName = 'proto.pb.Language';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Language.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Language.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Language} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Language.toObject = function(includeInstance, msg) {
  var f, obj = {
    language: jspb.Message.getFieldWithDefault(msg, 1, 0),
    script: jspb.Message.getFieldWithDefault(msg, 2, 0),
    region: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Language}
 */
proto.pb.Language.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Language;
  return proto.pb.Language.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Language} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Language}
 */
proto.pb.Language.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.Language.Language} */ (reader.readEnum());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.Language.Script} */ (reader.readEnum());
      msg.setScript(value);
      break;
    case 3:
      var value = /** @type {!proto.pb.Location.Country} */ (reader.readEnum());
      msg.setRegion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Language.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Language.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Language} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Language.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getScript();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRegion();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.Language.Language = {
  UNKNOWN_LANGUAGE: 0,
  EN: 1,
  AA: 2,
  AB: 3,
  AE: 4,
  AF: 5,
  AK: 6,
  AM: 7,
  AN: 8,
  AR: 9,
  AS: 10,
  AV: 11,
  AY: 12,
  AZ: 13,
  BA: 14,
  BE: 15,
  BG: 16,
  BH: 17,
  BI: 18,
  BM: 19,
  BN: 20,
  BO: 21,
  BR: 22,
  BS: 23,
  CA: 24,
  CE: 25,
  CH: 26,
  CO: 27,
  CR: 28,
  CS: 29,
  CU: 30,
  CV: 31,
  CY: 32,
  DA: 33,
  DE: 34,
  DV: 35,
  DZ: 36,
  EE: 37,
  EL: 38,
  EO: 39,
  ES: 40,
  ET: 41,
  EU: 42,
  FA: 43,
  FF: 44,
  FI: 45,
  FJ: 46,
  FO: 47,
  FR: 48,
  FY: 49,
  GA: 50,
  GD: 51,
  GL: 52,
  GN: 53,
  GU: 54,
  GV: 55,
  HA: 56,
  HE: 57,
  HI: 58,
  HO: 59,
  HR: 60,
  HT: 61,
  HU: 62,
  HY: 63,
  HZ: 64,
  IA: 65,
  ID: 66,
  IE: 67,
  IG: 68,
  II: 69,
  IK: 70,
  IO: 71,
  IS: 72,
  IT: 73,
  IU: 74,
  JA: 75,
  JV: 76,
  KA: 77,
  KG: 78,
  KI: 79,
  KJ: 80,
  KK: 81,
  KL: 82,
  KM: 83,
  KN: 84,
  KO: 85,
  KR: 86,
  KS: 87,
  KU: 88,
  KV: 89,
  KW: 90,
  KY: 91,
  LA: 92,
  LB: 93,
  LG: 94,
  LI: 95,
  LN: 96,
  LO: 97,
  LT: 98,
  LU: 99,
  LV: 100,
  MG: 101,
  MH: 102,
  MI: 103,
  MK: 104,
  ML: 105,
  MN: 106,
  MR: 107,
  MS: 108,
  MT: 109,
  MY: 110,
  NA: 111,
  NB: 112,
  ND: 113,
  NE: 114,
  NG: 115,
  NL: 116,
  NN: 117,
  NO: 118,
  NR: 119,
  NV: 120,
  NY: 121,
  OC: 122,
  OJ: 123,
  OM: 124,
  OR: 125,
  OS: 126,
  PA: 127,
  PI: 128,
  PL: 129,
  PS: 130,
  PT: 131,
  QU: 132,
  RM: 133,
  RN: 134,
  RO: 135,
  RU: 136,
  RW: 137,
  SA: 138,
  SC: 139,
  SD: 140,
  SE: 141,
  SG: 142,
  SI: 143,
  SK: 144,
  SL: 145,
  SM: 146,
  SN: 147,
  SO: 148,
  SQ: 149,
  SR: 150,
  SS: 151,
  ST: 152,
  SU: 153,
  SV: 154,
  SW: 155,
  TA: 156,
  TE: 157,
  TG: 158,
  TH: 159,
  TI: 160,
  TK: 161,
  TL: 162,
  TN: 163,
  TO: 164,
  TR: 165,
  TS: 166,
  TT: 167,
  TW: 168,
  TY: 169,
  UG: 170,
  UK: 171,
  UR: 172,
  UZ: 173,
  VE: 174,
  VI: 175,
  VO: 176,
  WA: 177,
  WO: 178,
  XH: 179,
  YI: 180,
  YO: 181,
  ZA: 182,
  ZH: 183,
  ZU: 184
};

/**
 * @enum {number}
 */
proto.pb.Language.Script = {
  UNKNOWN_SCRIPT: 0,
  ADLM: 1,
  AFAK: 2,
  AGHB: 3,
  AHOM: 4,
  ARAB: 5,
  ARAN: 6,
  ARMI: 7,
  ARMN: 8,
  AVST: 9,
  BALI: 10,
  BAMU: 11,
  BASS: 12,
  BATK: 13,
  BENG: 14,
  BHKS: 15,
  BLIS: 16,
  BOPO: 17,
  BRAH: 18,
  BRAI: 19,
  BUGI: 20,
  BUHD: 21,
  CAKM: 22,
  CANS: 23,
  CARI: 24,
  CHAM: 25,
  CHER: 26,
  CIRT: 27,
  COPT: 28,
  CPMN: 29,
  CPRT: 30,
  CYRL: 31,
  CYRS: 32,
  DEVA: 33,
  DOGR: 34,
  DSRT: 35,
  DUPL: 36,
  EGYD: 37,
  EGYH: 38,
  EGYP: 39,
  ELBA: 40,
  ELYM: 41,
  ETHI: 42,
  GEOK: 43,
  GEOR: 44,
  GLAG: 45,
  GONG: 46,
  GONM: 47,
  GOTH: 48,
  GRAN: 49,
  GREK: 50,
  GUJR: 51,
  GURU: 52,
  HANB: 53,
  HANG: 54,
  HANI: 55,
  HANO: 56,
  HANS: 57,
  HANT: 58,
  HATR: 59,
  HEBR: 60,
  HIRA: 61,
  HLUW: 62,
  HMNG: 63,
  HMNP: 64,
  HRKT: 65,
  HUNG: 66,
  INDS: 67,
  ITAL: 68,
  JAMO: 69,
  JAVA: 70,
  JPAN: 71,
  JURC: 72,
  KALI: 73,
  KANA: 74,
  KHAR: 75,
  KHMR: 76,
  KHOJ: 77,
  KITL: 78,
  KITS: 79,
  KNDA: 80,
  KORE: 81,
  KPEL: 82,
  KTHI: 83,
  LANA: 84,
  LAOO: 85,
  LATF: 86,
  LATG: 87,
  LATN: 88,
  LEKE: 89,
  LEPC: 90,
  LIMB: 91,
  LINA: 92,
  LINB: 93,
  LISU: 94,
  LOMA: 95,
  LYCI: 96,
  LYDI: 97,
  MAHJ: 98,
  MAKA: 99,
  MAND: 100,
  MANI: 101,
  MARC: 102,
  MAYA: 103,
  MEDF: 104,
  MEND: 105,
  MERC: 106,
  MERO: 107,
  MLYM: 108,
  MODI: 109,
  MONG: 110,
  MOON: 111,
  MROO: 112,
  MTEI: 113,
  MULT: 114,
  MYMR: 115,
  NAND: 116,
  NARB: 117,
  NBAT: 118,
  NEWA: 119,
  NKDB: 120,
  NKGB: 121,
  NKOO: 122,
  NSHU: 123,
  OGAM: 124,
  OLCK: 125,
  ORKH: 126,
  ORYA: 127,
  OSGE: 128,
  OSMA: 129,
  PALM: 130,
  PAUC: 131,
  PERM: 132,
  PHAG: 133,
  PHLI: 134,
  PHLP: 135,
  PHLV: 136,
  PHNX: 137,
  PLRD: 138,
  PIQD: 139,
  PRTI: 140,
  QAAA: 141,
  QABX: 142,
  RJNG: 143,
  ROHG: 144,
  RORO: 145,
  RUNR: 146,
  SAMR: 147,
  SARA: 148,
  SARB: 149,
  SAUR: 150,
  SGNW: 151,
  SHAW: 152,
  SHRD: 153,
  SHUI: 154,
  SIDD: 155,
  SIND: 156,
  SINH: 157,
  SOGD: 158,
  SOGO: 159,
  SORA: 160,
  SOYO: 161,
  SUND: 162,
  SYLO: 163,
  SYRC: 164,
  SYRE: 165,
  SYRJ: 166,
  SYRN: 167,
  TAGB: 168,
  TAKR: 169,
  TALE: 170,
  TALU: 171,
  TAML: 172,
  TANG: 173,
  TAVT: 174,
  TELU: 175,
  TENG: 176,
  TFNG: 177,
  TGLG: 178,
  THAA: 179,
  THAI: 180,
  TIBT: 181,
  TIRH: 182,
  UGAR: 183,
  VAII: 184,
  VISP: 185,
  WARA: 186,
  WCHO: 187,
  WOLE: 188,
  XPEO: 189,
  XSUX: 190,
  YIII: 191,
  ZANB: 192,
  ZINH: 193,
  ZMTH: 194,
  ZSYE: 195,
  ZSYM: 196,
  ZXXX: 197,
  ZYYY: 198,
  ZZZZ: 199
};

/**
 * optional Language language = 1;
 * @return {!proto.pb.Language.Language}
 */
proto.pb.Language.prototype.getLanguage = function() {
  return /** @type {!proto.pb.Language.Language} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.pb.Language.Language} value */
proto.pb.Language.prototype.setLanguage = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Script script = 2;
 * @return {!proto.pb.Language.Script}
 */
proto.pb.Language.prototype.getScript = function() {
  return /** @type {!proto.pb.Language.Script} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.pb.Language.Script} value */
proto.pb.Language.prototype.setScript = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Location.Country region = 3;
 * @return {!proto.pb.Location.Country}
 */
proto.pb.Language.prototype.getRegion = function() {
  return /** @type {!proto.pb.Location.Country} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.pb.Location.Country} value */
proto.pb.Language.prototype.setRegion = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Location.displayName = 'proto.pb.Location';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    country: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, ""),
    city: jspb.Message.getFieldWithDefault(msg, 3, ""),
    code: jspb.Message.getFieldWithDefault(msg, 4, ""),
    latitude: jspb.Message.getFieldWithDefault(msg, 5, 0),
    longitude: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Location}
 */
proto.pb.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Location;
  return proto.pb.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Location}
 */
proto.pb.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.Location.Country} */ (reader.readEnum());
      msg.setCountry(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLatitude(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.Location.Country = {
  UNKNOWN_COUNTRY: 0,
  AF: 1,
  AX: 2,
  AL: 3,
  DZ: 4,
  AS: 5,
  AD: 6,
  AO: 7,
  AI: 8,
  AQ: 9,
  AG: 10,
  AR: 11,
  AM: 12,
  AW: 13,
  AU: 14,
  AT: 15,
  AZ: 16,
  BS: 17,
  BH: 18,
  BD: 19,
  BB: 20,
  BY: 21,
  BE: 22,
  BZ: 23,
  BJ: 24,
  BM: 25,
  BT: 26,
  BO: 27,
  BQ: 28,
  BA: 29,
  BW: 30,
  BV: 31,
  BR: 32,
  IO: 33,
  BN: 34,
  BG: 35,
  BF: 36,
  BI: 37,
  KH: 38,
  CM: 39,
  CA: 40,
  CV: 41,
  KY: 42,
  CF: 43,
  TD: 44,
  CL: 45,
  CN: 46,
  CX: 47,
  CC: 48,
  CO: 49,
  KM: 50,
  CG: 51,
  CD: 52,
  CK: 53,
  CR: 54,
  CI: 55,
  HR: 56,
  CU: 57,
  CW: 58,
  CY: 59,
  CZ: 60,
  DK: 61,
  DJ: 62,
  DM: 63,
  DO: 64,
  EC: 65,
  EG: 66,
  SV: 67,
  GQ: 68,
  ER: 69,
  EE: 70,
  ET: 71,
  FK: 72,
  FO: 73,
  FJ: 74,
  FI: 75,
  FR: 76,
  GF: 77,
  PF: 78,
  TF: 79,
  GA: 80,
  GM: 81,
  GE: 82,
  DE: 83,
  GH: 84,
  GI: 85,
  GR: 86,
  GL: 87,
  GD: 88,
  GP: 89,
  GU: 90,
  GT: 91,
  GG: 92,
  GN: 93,
  GW: 94,
  GY: 95,
  HT: 96,
  HM: 97,
  VA: 98,
  HN: 99,
  HK: 100,
  HU: 101,
  IS: 102,
  IN: 103,
  ID: 104,
  IR: 105,
  IQ: 106,
  IE: 107,
  IM: 108,
  IL: 109,
  IT: 110,
  JM: 111,
  JP: 112,
  JE: 113,
  JO: 114,
  KZ: 115,
  KE: 116,
  KI: 117,
  KP: 118,
  KR: 119,
  KW: 120,
  KG: 121,
  LA: 122,
  LV: 123,
  LB: 124,
  LS: 125,
  LR: 126,
  LY: 127,
  LI: 128,
  LT: 129,
  LU: 130,
  MO: 131,
  MK: 132,
  MG: 133,
  MW: 134,
  MY: 135,
  MV: 136,
  ML: 137,
  MT: 138,
  MH: 139,
  MQ: 140,
  MR: 141,
  MU: 142,
  YT: 143,
  MX: 144,
  FM: 145,
  MD: 146,
  MC: 147,
  MN: 148,
  ME: 149,
  MS: 150,
  MA: 151,
  MZ: 152,
  MM: 153,
  NA: 154,
  NR: 155,
  NP: 156,
  NL: 157,
  NC: 158,
  NZ: 159,
  NI: 160,
  NE: 161,
  NG: 162,
  NU: 163,
  NF: 164,
  MP: 165,
  NO: 166,
  OM: 167,
  PK: 168,
  PW: 169,
  PS: 170,
  PA: 171,
  PG: 172,
  PY: 173,
  PE: 174,
  PH: 175,
  PN: 176,
  PL: 177,
  PT: 178,
  PR: 179,
  QA: 180,
  RE: 181,
  RO: 182,
  RU: 183,
  RW: 184,
  BL: 185,
  SH: 186,
  KN: 187,
  LC: 188,
  MF: 189,
  PM: 190,
  VC: 191,
  WS: 192,
  SM: 193,
  ST: 194,
  SA: 195,
  SN: 196,
  RS: 197,
  SC: 198,
  SL: 199,
  SG: 200,
  SX: 201,
  SK: 202,
  SI: 203,
  SB: 204,
  SO: 205,
  ZA: 206,
  GS: 207,
  SS: 208,
  ES: 209,
  LK: 210,
  SD: 211,
  SR: 212,
  SJ: 213,
  SZ: 214,
  SE: 215,
  CH: 216,
  SY: 217,
  TW: 218,
  TJ: 219,
  TZ: 220,
  TH: 221,
  TL: 222,
  TG: 223,
  TK: 224,
  TO: 225,
  TT: 226,
  TN: 227,
  TR: 228,
  TM: 229,
  TC: 230,
  TV: 231,
  UG: 232,
  UA: 233,
  AE: 234,
  GB: 235,
  US: 236,
  UM: 237,
  UY: 238,
  UZ: 239,
  VU: 240,
  VE: 241,
  VN: 242,
  VG: 243,
  VI: 244,
  WF: 245,
  EH: 246,
  YE: 247,
  ZM: 248,
  ZW: 249
};

/**
 * optional Country country = 1;
 * @return {!proto.pb.Location.Country}
 */
proto.pb.Location.prototype.getCountry = function() {
  return /** @type {!proto.pb.Location.Country} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.pb.Location.Country} value */
proto.pb.Location.prototype.setCountry = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string state = 2;
 * @return {string}
 */
proto.pb.Location.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.Location.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string city = 3;
 * @return {string}
 */
proto.pb.Location.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.Location.prototype.setCity = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string code = 4;
 * @return {string}
 */
proto.pb.Location.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pb.Location.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional sint32 latitude = 5;
 * @return {number}
 */
proto.pb.Location.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.Location.prototype.setLatitude = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint32 longitude = 6;
 * @return {number}
 */
proto.pb.Location.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.Location.prototype.setLongitude = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


goog.object.extend(exports, proto.pb);
